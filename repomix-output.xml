This file is a merged representation of the entire codebase, combined into a single document by Repomix.

<file_summary>
This section contains a summary of this file.

<purpose>
This file contains a packed representation of the entire repository's contents.
It is designed to be easily consumable by AI systems for analysis, code review,
or other automated processes.
</purpose>

<file_format>
The content is organized as follows:
1. This summary section
2. Repository information
3. Directory structure
4. Repository files (if enabled)
5. Multiple file entries, each consisting of:
  - File path as an attribute
  - Full contents of the file
</file_format>

<usage_guidelines>
- This file should be treated as read-only. Any changes should be made to the
  original repository files, not this packed version.
- When processing this file, use the file path to distinguish
  between different files in the repository.
- Be aware that this file may contain sensitive information. Handle it with
  the same level of security as you would the original repository.
</usage_guidelines>

<notes>
- Some files may have been excluded based on .gitignore rules and Repomix's configuration
- Binary files are not included in this packed representation. Please refer to the Repository Structure section for a complete list of file paths, including binary files
- Files matching patterns in .gitignore are excluded
- Files matching default ignore patterns are excluded
- Files are sorted by Git change count (files with more changes are at the bottom)
</notes>

</file_summary>

<directory_structure>
.dockerignore
.repomixignore
apps/server/.env.example
apps/server/Dockerfile
apps/server/eslint.config.js
apps/server/package.json
apps/server/src/env.ts
apps/server/src/index.ts
apps/server/tsconfig.json
apps/server/tsup.config.ts
apps/server/turbo.json
apps/web/.env.example
apps/web/.prettierignore
apps/web/Dockerfile
apps/web/eslint.config.js
apps/web/index.html
apps/web/nginx.conf
apps/web/package.json
apps/web/public/healthcheck
apps/web/src/clients/authClient.ts
apps/web/src/clients/queryClient.ts
apps/web/src/clients/trpcClient.ts
apps/web/src/components/spinner.tsx
apps/web/src/env.ts
apps/web/src/features/auth/components/login-form.tsx
apps/web/src/features/auth/components/password-input.tsx
apps/web/src/features/auth/components/register-form.tsx
apps/web/src/features/auth/components/user-avatar.tsx
apps/web/src/features/auth/guards/protected-route.tsx
apps/web/src/features/auth/guards/public-route.tsx
apps/web/src/features/auth/hooks/use-auth.ts
apps/web/src/features/posts/components/create-post-dialog.tsx
apps/web/src/features/posts/components/create-post-form.tsx
apps/web/src/features/posts/components/delete-post-button.tsx
apps/web/src/features/posts/components/post-card.tsx
apps/web/src/features/posts/components/posts-search-bar.tsx
apps/web/src/features/posts/components/posts-sort-button.tsx
apps/web/src/features/posts/hooks/use-create-post.ts
apps/web/src/features/posts/hooks/use-post-actions.ts
apps/web/src/features/posts/hooks/use-posts-navigation.ts
apps/web/src/features/posts/hooks/use-posts-search.ts
apps/web/src/main.tsx
apps/web/src/router.tsx
apps/web/src/routes/__root.tsx
apps/web/src/routes/_protected/layout.tsx
apps/web/src/routes/_protected/posts/-validations/posts-link-options.ts
apps/web/src/routes/_protected/posts/$postid/index.tsx
apps/web/src/routes/_protected/posts/index.tsx
apps/web/src/routes/_public/layout.tsx
apps/web/src/routes/_public/login.tsx
apps/web/src/routes/_public/register.tsx
apps/web/src/routes/-components/common/form-field-info.tsx
apps/web/src/routes/-components/common/spinner.tsx
apps/web/src/routes/-components/layout/nav/nav-container.tsx
apps/web/src/routes/-components/layout/nav/navbar.tsx
apps/web/src/routes/index.tsx
apps/web/src/routeTree.gen.ts
apps/web/src/style.css
apps/web/src/vite-env.d.ts
apps/web/tsconfig.app.json
apps/web/tsconfig.json
apps/web/tsconfig.node.json
apps/web/turbo.json
apps/web/vite.config.ts
compose.yaml
LICENSE
package.json
packages/api/eslint.config.js
packages/api/package.json
packages/api/src/client/index.ts
packages/api/src/server/index.ts
packages/api/src/server/router/post.ts
packages/api/src/server/trpc.ts
packages/api/tsconfig.json
packages/auth/eslint.config.js
packages/auth/package.json
packages/auth/src/cli-config.ts
packages/auth/src/client.ts
packages/auth/src/server.ts
packages/auth/tsconfig.json
packages/db/.env.example
packages/db/Dockerfile
packages/db/drizzle.config.ts
packages/db/eslint.config.js
packages/db/package.json
packages/db/src/client.ts
packages/db/src/index.ts
packages/db/src/schema.ts
packages/db/src/schemas/auth.ts
packages/db/src/schemas/posts.ts
packages/db/tsconfig.drizzlekit.json
packages/db/tsconfig.json
packages/db/tsconfig.package.json
packages/db/turbo.json
packages/ui/components.json
packages/ui/eslint.config.js
packages/ui/package.json
packages/ui/src/components/avatar.tsx
packages/ui/src/components/button.tsx
packages/ui/src/components/dialog.tsx
packages/ui/src/components/dropdown-menu.tsx
packages/ui/src/components/input.tsx
packages/ui/src/components/label.tsx
packages/ui/src/components/sonner.tsx
packages/ui/src/components/textarea.tsx
packages/ui/src/components/tooltip.tsx
packages/ui/src/lib/utils.ts
packages/ui/tsconfig.json
pnpm-workspace.yaml
README.md
tools/eslint/base.js
tools/eslint/package.json
tools/eslint/react.js
tools/eslint/tsconfig.json
tools/eslint/types.d.ts
tools/prettier/index.js
tools/prettier/package.json
tools/prettier/tsconfig.json
tools/tailwind/eslint.config.js
tools/tailwind/package.json
tools/tailwind/style.css
tools/typescript/base.json
tools/typescript/internal-package.json
tools/typescript/package.json
tools/typescript/vite.json
turbo.json
</directory_structure>

<files>
This section contains the contents of the repository's files.

<file path=".repomixignore">
# Node modules dans la racine et dans chaque app
node_modules/
apps/**/node_modules/

# Dossiers de build courants
dist/
build/
apps/**/dist/
apps/**/build/

# Fichiers et dossiers Git
.git/
.gitignore

# Caches et logs
*.log
.cache/
.tmp/

# Autres fichiers temporaires ou spécifiques à l'IDE
.vscode/
.DS_Store
</file>

<file path="apps/web/src/components/spinner.tsx">
import { GearIcon } from '@radix-ui/react-icons';
import { cn } from '@repo/ui/lib/utils';

export function Spinner({ className }: Readonly<{ className?: string }>) {
  return (
    <div className={cn('inline-block animate-spin duration-500', className)}>
      <GearIcon />
    </div>
  );
}

export default Spinner;
</file>

<file path="apps/web/src/features/auth/components/login-form.tsx">
import { Button } from '@repo/ui/components/button';
import { Input } from '@repo/ui/components/input';
import { Label } from '@repo/ui/components/label';
import { useForm } from '@tanstack/react-form';
import * as v from 'valibot';

import { useAuth } from '../hooks/use-auth';
import { PasswordInput } from './password-input';
import FormFieldInfo from '@/routes/-components/common/form-field-info';
import Spinner from '@/routes/-components/common/spinner';

const LoginFormSchema = v.object({
  email: v.pipe(v.string(), v.email('Please enter a valid email address')),
  password: v.pipe(
    v.string(),
    v.minLength(8, 'Password must be at least 8 characters'),
  ),
});

type LoginFormProps = {
  onSuccess?: () => void;
  onError?: (error: string) => void;
  className?: string;
};

export const LoginForm = ({
  onSuccess,
  onError,
  className,
}: LoginFormProps) => {
  const { login, isLoading } = useAuth();

  const form = useForm({
    defaultValues: {
      email: '',
      password: '',
    },
    validators: {
      onChange: LoginFormSchema,
    },
    onSubmit: async ({ value }) => {
      const result = await login({
        email: value.email,
        password: value.password,
      });

      if (result.success) {
        onSuccess?.();
      } else {
        onError?.(result.error || 'Login failed');
      }
    },
  });

  return (
    <form
      className={`flex flex-col gap-y-4 ${className}`}
      onSubmit={(e) => {
        e.preventDefault();
        e.stopPropagation();
        form.handleSubmit();
      }}
    >
      <div>
        <form.Field
          name="email"
          children={(field) => (
            <>
              <Label htmlFor={field.name}>Email</Label>
              <Input
                className="mt-1"
                id={field.name}
                type="email"
                name={field.name}
                value={field.state.value}
                onBlur={field.handleBlur}
                onChange={(e) => field.handleChange(e.target.value)}
                placeholder="Enter your email"
              />
              <FormFieldInfo field={field} />
            </>
          )}
        />
      </div>

      <div>
        <form.Field
          name="password"
          children={(field) => (
            <>
              <PasswordInput
                id={field.name}
                name={field.name}
                label="Password"
                value={field.state.value}
                onChange={field.handleChange}
                onBlur={field.handleBlur}
                placeholder="Enter your password"
                error={
                  field.state.meta.isTouched && field.state.meta.errors.length
                    ? field.state.meta.errors[0]?.message
                    : undefined
                }
              />
            </>
          )}
        />
      </div>

      <form.Subscribe
        selector={(state) => [state.canSubmit, state.isSubmitting]}
        children={([canSubmit, isSubmitting]) => (
          <Button
            type="submit"
            disabled={!canSubmit || isLoading}
            className="h-12 mt-2"
          >
            {isSubmitting || isLoading ? <Spinner /> : 'Log in'}
          </Button>
        )}
      />
    </form>
  );
};
</file>

<file path="apps/web/src/features/auth/components/password-input.tsx">
import { EyeNoneIcon, EyeOpenIcon } from '@radix-ui/react-icons';
import { Button } from '@repo/ui/components/button';
import { Input } from '@repo/ui/components/input';
import { Label } from '@repo/ui/components/label';
import { useState } from 'react';

type PasswordInputProps = {
  id?: string;
  name?: string;
  label?: string;
  placeholder?: string;
  value: string;
  onChange: (value: string) => void;
  onBlur?: () => void;
  className?: string;
  error?: string;
  required?: boolean;
};

export const PasswordInput = ({
  id,
  name,
  label = 'Password',
  placeholder = 'Enter your password',
  value,
  onChange,
  onBlur,
  className,
  error,
  required = false,
}: PasswordInputProps) => {
  const [isVisible, setIsVisible] = useState(false);

  const toggleVisibility = () => {
    setIsVisible(!isVisible);
  };

  return (
    <div className={className}>
      {label && (
        <Label htmlFor={id || name}>
          {label}
          {required && <span className="text-red-500 ml-1">*</span>}
        </Label>
      )}

      <div className="relative mt-1">
        <Input
          id={id || name}
          name={name}
          type={isVisible ? 'text' : 'password'}
          value={value}
          onChange={(e) => onChange(e.target.value)}
          onBlur={onBlur}
          placeholder={placeholder}
          className={`pr-10 ${error ? 'border-red-500' : ''}`}
        />

        <Button
          type="button"
          variant="ghost"
          size="icon"
          className="absolute right-2 top-1/2 -translate-y-1/2 h-7 w-7 rounded-full"
          onClick={toggleVisibility}
          tabIndex={-1}
        >
          {isVisible ? (
            <EyeOpenIcon className="h-4 w-4" />
          ) : (
            <EyeNoneIcon className="h-4 w-4" />
          )}
        </Button>
      </div>

      {error && <p className="text-sm text-red-500 mt-1">{error}</p>}
    </div>
  );
};
</file>

<file path="apps/web/src/features/auth/components/register-form.tsx">
import { Button } from '@repo/ui/components/button';
import { Input } from '@repo/ui/components/input';
import { Label } from '@repo/ui/components/label';
import { useForm } from '@tanstack/react-form';
import * as v from 'valibot';

import { useAuth } from '../hooks/use-auth';
import { PasswordInput } from './password-input';
import FormFieldInfo from '@/routes/-components/common/form-field-info';
import Spinner from '@/routes/-components/common/spinner';

const RegisterFormSchema = v.pipe(
  v.object({
    name: v.pipe(
      v.string(),
      v.minLength(2, 'Name must be at least 2 characters'),
    ),
    email: v.pipe(v.string(), v.email('Please enter a valid email address')),
    password: v.pipe(
      v.string(),
      v.minLength(8, 'Password must be at least 8 characters'),
    ),
    confirmPassword: v.string(),
  }),
  v.forward(
    v.partialCheck(
      [['password'], ['confirmPassword']],
      (input) => input.password === input.confirmPassword,
      'The two passwords do not match.',
    ),
    ['confirmPassword'],
  ),
);

type RegisterFormProps = {
  onSuccess?: () => void;
  onError?: (error: string) => void;
  className?: string;
};

export const RegisterForm = ({
  onSuccess,
  onError,
  className,
}: RegisterFormProps) => {
  const { register, isLoading } = useAuth();

  const form = useForm({
    defaultValues: {
      name: '',
      email: '',
      password: '',
      confirmPassword: '',
    },
    validators: {
      onChange: RegisterFormSchema,
    },
    onSubmit: async ({ value }) => {
      const result = await register({
        name: value.name,
        email: value.email,
        password: value.password,
      });

      if (result.success) {
        onSuccess?.();
      } else {
        onError?.(result.error || 'Registration failed');
      }
    },
  });

  return (
    <form
      className={`flex flex-col gap-y-4 ${className}`}
      onSubmit={(e) => {
        e.preventDefault();
        e.stopPropagation();
        form.handleSubmit();
      }}
    >
      <div>
        <form.Field
          name="name"
          children={(field) => (
            <>
              <Label htmlFor={field.name}>Full Name</Label>
              <Input
                className="mt-1"
                id={field.name}
                type="text"
                name={field.name}
                value={field.state.value}
                onBlur={field.handleBlur}
                onChange={(e) => field.handleChange(e.target.value)}
                placeholder="Enter your full name"
              />
              <FormFieldInfo field={field} />
            </>
          )}
        />
      </div>

      <div>
        <form.Field
          name="email"
          children={(field) => (
            <>
              <Label htmlFor={field.name}>Email</Label>
              <Input
                className="mt-1"
                id={field.name}
                type="email"
                name={field.name}
                value={field.state.value}
                onBlur={field.handleBlur}
                onChange={(e) => field.handleChange(e.target.value)}
                placeholder="Enter your email"
              />
              <FormFieldInfo field={field} />
            </>
          )}
        />
      </div>

      <div>
        <form.Field
          name="password"
          children={(field) => (
            <>
              <PasswordInput
                id={field.name}
                name={field.name}
                label="Password"
                value={field.state.value}
                onChange={field.handleChange}
                onBlur={field.handleBlur}
                placeholder="Enter your password"
                error={
                  field.state.meta.isTouched && field.state.meta.errors.length
                    ? field.state.meta.errors[0]?.message
                    : undefined
                }
              />
            </>
          )}
        />
      </div>

      <div>
        <form.Field
          name="confirmPassword"
          children={(field) => (
            <>
              <PasswordInput
                id={field.name}
                name={field.name}
                label="Confirm Password"
                value={field.state.value}
                onChange={field.handleChange}
                onBlur={field.handleBlur}
                placeholder="Confirm your password"
                error={
                  field.state.meta.isTouched && field.state.meta.errors.length
                    ? field.state.meta.errors[0]?.message
                    : undefined
                }
              />
            </>
          )}
        />
      </div>

      <form.Subscribe
        selector={(state) => [state.canSubmit, state.isSubmitting]}
        children={([canSubmit, isSubmitting]) => (
          <Button
            type="submit"
            disabled={!canSubmit || isLoading}
            className="h-12 mt-2"
          >
            {isSubmitting || isLoading ? <Spinner /> : 'Register'}
          </Button>
        )}
      />
    </form>
  );
};
</file>

<file path="apps/web/src/features/auth/components/user-avatar.tsx">
import { ExitIcon, MoonIcon, SunIcon } from '@radix-ui/react-icons';
import {
  Avatar,
  AvatarFallback,
  AvatarImage,
} from '@repo/ui/components/avatar';
import {
  DropdownMenu,
  DropdownMenuContent,
  DropdownMenuItem,
  DropdownMenuTrigger,
} from '@repo/ui/components/dropdown-menu';
import { useTheme } from 'next-themes';
import { useAuth } from '../hooks/use-auth';

type UserAvatarProps = {
  className?: string;
  showDropdown?: boolean;
  onLogout?: () => void;
};

export const UserAvatar = ({
  className = 'cursor-pointer w-8.5 h-8.5',
  showDropdown = true,
  onLogout,
}: UserAvatarProps) => {
  const { user, logout } = useAuth();
  const { resolvedTheme, setTheme } = useTheme();

  if (!user) return null;

  const handleLogout = async () => {
    await logout();
    onLogout?.();
  };

  const toggleTheme = () => {
    setTheme(resolvedTheme === 'dark' ? 'light' : 'dark');
  };

  const avatarContent = (
    <Avatar className={className}>
      <AvatarImage referrerPolicy="no-referrer" src={user.image ?? ''} />
      <AvatarFallback className="text-sm">
        {(user.name?.split(' ')[0]?.[0] || '') +
          (user.name?.split(' ')[1]?.[0] || '')}
      </AvatarFallback>
    </Avatar>
  );

  if (!showDropdown) {
    return avatarContent;
  }

  return (
    <DropdownMenu>
      <DropdownMenuTrigger asChild>{avatarContent}</DropdownMenuTrigger>

      <DropdownMenuContent align="end" className="w-40">
        <div className="flex flex-col p-2 max-w-full break-words whitespace-break-spaces">
          <span className="text-sm font-bold line-clamp-2">{user.name}</span>
          <span className="text-xs italic mt-1 line-clamp-2">{user.email}</span>
        </div>

        <hr className="mb-2" />

        <DropdownMenuItem className="cursor-pointer" onClick={toggleTheme}>
          {resolvedTheme === 'dark' ? <MoonIcon /> : <SunIcon />}
          <span className="ml-[5px] capitalize">Theme</span>
        </DropdownMenuItem>

        <DropdownMenuItem onClick={handleLogout} className="cursor-pointer">
          <ExitIcon className="mr-[5px] w-5 ml-[0.5px]" />
          Logout
        </DropdownMenuItem>
      </DropdownMenuContent>
    </DropdownMenu>
  );
};
</file>

<file path="apps/web/src/features/auth/guards/protected-route.tsx">
import { Navigate } from '@tanstack/react-router';
import type { ReactNode } from 'react';
import { useAuth } from '../hooks/use-auth';
import Spinner from '@/routes/-components/common/spinner';

type ProtectedRouteProps = {
  children: ReactNode;
  redirectTo?: string;
  fallback?: ReactNode;
};

export const ProtectedRoute = ({
  children,
  redirectTo = '/login',
  fallback,
}: ProtectedRouteProps) => {
  const { isAuthenticated, isLoading } = useAuth();

  if (isLoading) {
    return <>{fallback || <Spinner />}</>;
  }

  if (!isAuthenticated) {
    return <Navigate to={redirectTo} />;
  }

  return <>{children}</>;
};
</file>

<file path="apps/web/src/features/auth/guards/public-route.tsx">
import { Navigate } from '@tanstack/react-router';
import type { ReactNode } from 'react';
import { useAuth } from '../hooks/use-auth';
import Spinner from '@/routes/-components/common/spinner';

type PublicRouteProps = {
  children: ReactNode;
  redirectTo?: string;
  fallback?: ReactNode;
};

export const PublicRoute = ({
  children,
  redirectTo = '/',
  fallback,
}: PublicRouteProps) => {
  const { isAuthenticated, isLoading } = useAuth();

  if (isLoading) {
    return <>{fallback || <Spinner />}</>;
  }

  if (isAuthenticated) {
    return <Navigate to={redirectTo} />;
  }

  return <>{children}</>;
};
</file>

<file path="apps/web/src/features/auth/hooks/use-auth.ts">
import { useNavigate } from '@tanstack/react-router';
import { toast } from 'sonner';
import { authClient } from '@/clients/authClient';

export const useAuth = () => {
  const navigate = useNavigate();
  const { data: session, isPending } = authClient.useSession();

  const user = session?.user ?? null;
  const isAuthenticated = !!user;
  const isLoading = isPending;

  const login = async (credentials: { email: string; password: string }) => {
    try {
      const { error } = await authClient.signIn.email(credentials, {
        onSuccess: () => {
          toast.success('Welcome back!');
          navigate({ to: '/' });
        },
      });

      if (error) {
        toast.error(error.message ?? 'Login failed');
        return { success: false, error: error.message };
      }

      return { success: true };
    } catch (error) {
      const message = error instanceof Error ? error.message : 'Login failed';
      toast.error(message);
      return { success: false, error: message };
    }
  };

  const register = async (data: {
    name: string;
    email: string;
    password: string;
  }) => {
    try {
      const { error } = await authClient.signUp.email(data, {
        onSuccess: () => {
          toast.success('Account created successfully!');
          navigate({ to: '/' });
        },
      });

      if (error) {
        toast.error(error.message ?? 'Registration failed');
        return { success: false, error: error.message };
      }

      return { success: true };
    } catch (error) {
      const message =
        error instanceof Error ? error.message : 'Registration failed';
      toast.error(message);
      return { success: false, error: message };
    }
  };

  const logout = async () => {
    try {
      await authClient.signOut();
      toast.info('You have been logged out');
      navigate({ to: '/' });
    } catch (error) {
      toast.error('Logout failed');
    }
  };

  const redirectToLogin = () => {
    navigate({ to: '/login' });
  };

  const redirectToRegister = () => {
    navigate({ to: '/register' });
  };

  return {
    user,
    session,
    isAuthenticated,
    isLoading,

    login,
    register,
    logout,

    redirectToLogin,
    redirectToRegister,
  };
};
</file>

<file path="apps/web/src/features/posts/components/create-post-dialog.tsx">
import { PlusIcon } from '@radix-ui/react-icons';
import { Button } from '@repo/ui/components/button';
import {
  Dialog,
  DialogContent,
  DialogDescription,
  DialogHeader,
  DialogTitle,
  DialogTrigger,
} from '@repo/ui/components/dialog';
import { useState } from 'react';

import { CreatePostForm } from './create-post-form';

export const CreatePostDialog = () => {
  const [open, setOpen] = useState(false);

  return (
    <Dialog open={open} onOpenChange={setOpen}>
      <DialogTrigger asChild>
        <Button>
          <PlusIcon />
          Create
        </Button>
      </DialogTrigger>

      <DialogContent className="max-w-[90vw] xl:max-w-screen-lg data-[state=open]:slide-in-from-right-1/3 data-[state=closed]:slide-out-to-right-1/3">
        <DialogHeader>
          <DialogTitle>Create Post</DialogTitle>
          <DialogDescription>
            Write about an interesting topic!
          </DialogDescription>
        </DialogHeader>

        <CreatePostForm onSuccess={() => setOpen(false)} />
      </DialogContent>
    </Dialog>
  );
};
</file>

<file path="apps/web/src/features/posts/components/create-post-form.tsx">
import { Button } from '@repo/ui/components/button';
import { Input } from '@repo/ui/components/input';
import { Label } from '@repo/ui/components/label';
import { Textarea } from '@repo/ui/components/textarea';
import { useForm } from '@tanstack/react-form';
import * as v from 'valibot';

import { useCreatePost } from '../hooks/use-create-post';
import FormFieldInfo from '@/routes/-components/common/form-field-info';
import Spinner from '@/routes/-components/common/spinner';

const FormSchema = v.object({
  title: v.pipe(
    v.string(),
    v.minLength(3, 'Please enter at least 3 characters'),
  ),
  content: v.pipe(
    v.string(),
    v.minLength(5, 'Please enter at least 5 characters'),
  ),
  category: v.pipe(
    v.string(),
    v.minLength(3, 'Please enter at least 3 characters'),
  ),
});

type CreatePostFormProps = {
  onSuccess?: () => void;
};

export const CreatePostForm = ({ onSuccess }: CreatePostFormProps) => {
  const { createPost, isCreating } = useCreatePost();

  const form = useForm({
    defaultValues: {
      title: '',
      content: '',
      category: '',
    },
    validators: {
      onChange: FormSchema,
    },
    onSubmit: async ({ value, formApi }) => {
      try {
        await createPost({
          title: value.title,
          content: value.content,
          category: value.category,
        });
        formApi.reset();
        onSuccess?.();
      } catch (error) {
        // error handled with hook
        console.error('Error creating post:', error);
      }
    },
  });
  return (
    <form
      className="flex flex-col gap-y-3"
      onSubmit={(e) => {
        e.preventDefault();
        e.stopPropagation();
        form.handleSubmit();
      }}
    >
      <div>
        <form.Field
          name="title"
          children={(field) => (
            <>
              <Label htmlFor={field.name}>Title</Label>
              <Input
                className="mt-2"
                id={field.name}
                name={field.name}
                value={field.state.value}
                onBlur={field.handleBlur}
                onChange={(e) => field.handleChange(e.target.value)}
              />
              <FormFieldInfo field={field} />
            </>
          )}
        />
      </div>

      <div>
        <form.Field
          name="content"
          children={(field) => (
            <>
              <Label htmlFor={field.name}>Content</Label>
              <Textarea
                className="mt-2"
                rows={8}
                id={field.name}
                name={field.name}
                value={field.state.value}
                onBlur={field.handleBlur}
                onChange={(e) => field.handleChange(e.target.value)}
              />
              <FormFieldInfo field={field} />
            </>
          )}
        />
      </div>

      <div>
        <form.Field
          name="category"
          children={(field) => {
            return (
              <>
                <Label htmlFor={field.name}>Category</Label>
                <Input
                  className="mt-2"
                  id={field.name}
                  name={field.name}
                  value={field.state.value}
                  onBlur={field.handleBlur}
                  onChange={(e) => field.handleChange(e.target.value)}
                />
                <FormFieldInfo field={field} />
              </>
            );
          }}
        />
      </div>

      <form.Subscribe
        selector={(state) => [state.canSubmit, state.isSubmitting]}
        children={([canSubmit, isSubmitting]) => (
          <Button
            type="submit"
            disabled={!canSubmit || isCreating}
            className="mt-3 h-10 w-24"
          >
            {isSubmitting || isCreating ? <Spinner /> : 'Create'}
          </Button>
        )}
      />
    </form>
  );
};
</file>

<file path="apps/web/src/features/posts/components/delete-post-button.tsx">
// apps/web/src/features/posts/components/DeletePostButton.tsx (version simplifiée)
import { Button } from '@repo/ui/components/button';
import {
  Tooltip,
  TooltipArrow,
  TooltipContent,
  TooltipProvider,
  TooltipTrigger,
} from '@repo/ui/components/tooltip';
import { cn } from '@repo/ui/lib/utils';
import type { ReactNode } from 'react';

import { usePostActions } from '../hooks/use-post-actions';
import { Spinner } from '@/components/spinner';

interface DeletePostButtonProps {
  children: ReactNode;
  className?: string;
  postId: string;
}

export function DeletePostButton({
  children,
  className,
  postId,
}: DeletePostButtonProps) {
  const { deletePost, isDeletingPost } = usePostActions();

  return (
    <TooltipProvider delayDuration={0}>
      <Tooltip>
        <TooltipTrigger asChild>
          <Button
            disabled={isDeletingPost}
            onClick={(e) => {
              e.preventDefault();
              deletePost({ id: postId });
            }}
            variant="destructive"
            className={cn('h-9 w-10', className)}
          >
            {isDeletingPost ? <Spinner /> : children}
          </Button>
        </TooltipTrigger>
        <TooltipContent
          side="left"
          align="center"
          sideOffset={4}
          className="bg-neutral-500 fill-neutral-500 duration-0"
        >
          <span>Delete Post</span>
          <TooltipArrow width={15} height={10} className="duration-0" />
        </TooltipContent>
      </Tooltip>
    </TooltipProvider>
  );
}
</file>

<file path="apps/web/src/features/posts/components/post-card.tsx">
import { TrashIcon } from '@radix-ui/react-icons';
import { Link } from '@tanstack/react-router';
import type { AppRouter } from '@repo/api/server';
import type { inferRouterOutputs } from '@trpc/server';

import { DeletePostButton } from './delete-post-button';

type Post = inferRouterOutputs<AppRouter>['posts']['all'][number];

interface PostCardProps {
  post: Post;
  disabled?: boolean;
}

export function PostCard({ post, disabled = false }: PostCardProps) {
  return (
    <Link
      to="/posts/$postid"
      params={{ postid: post.id }}
      className="border border-gray-500 bg-elevated p-4 w-full flex items-center justify-between gap-x-3 rounded-xl hover:brightness-90"
      disabled={disabled}
    >
      <div className="flex flex-col gap-y-1">
        <div className="text-lg font-bold line-clamp-3">
          {post.title} <span>{post.category}</span>
        </div>
        <div className="italic text-sm">{post.createdAt.toLocaleString()}</div>
      </div>

      <DeletePostButton postId={post.id}>
        <TrashIcon />
      </DeletePostButton>
    </Link>
  );
}
</file>

<file path="apps/web/src/features/posts/components/posts-search-bar.tsx">
import { MagnifyingGlassIcon } from '@radix-ui/react-icons';
import { Input } from '@repo/ui/components/input';
import type { PostsSearchParams } from '@/routes/_protected/posts/-validations/posts-link-options';
import { usePostsSearch } from '../hooks/use-posts-search';

type PostsSearchBarProps = {
  currentSearch: PostsSearchParams;
};

export const PostsSearchBar = ({ currentSearch }: PostsSearchBarProps) => {
  const { updateSearch } = usePostsSearch(currentSearch);

  return (
    <div className="relative sm:max-w-64 w-full">
      <Input
        value={currentSearch.searchString}
        onChange={(e) => updateSearch('searchString', e.target.value)}
        placeholder="Search by title..."
        className="w-full pr-10 placeholder:italic peer"
      />
      <MagnifyingGlassIcon className="absolute right-3 top-1/2 transform -translate-y-1/2 text-input peer-focus:text-foreground transition-colors" />
    </div>
  );
};
</file>

<file path="apps/web/src/features/posts/components/posts-sort-button.tsx">
import { ArrowDownIcon, ArrowUpIcon } from '@radix-ui/react-icons';
import { Button } from '@repo/ui/components/button';
import {
  Tooltip,
  TooltipTrigger,
  TooltipContent,
  TooltipArrow,
  TooltipProvider,
} from '@repo/ui/components/tooltip';
import type { PostsSearchParams } from '@/routes/_protected/posts/-validations/posts-link-options';
import { usePostsSearch } from '../hooks/use-posts-search';

type PostsSortButtonProps = {
  currentSearch: PostsSearchParams;
};

export const PostsSortButton = ({ currentSearch }: PostsSortButtonProps) => {
  const { updateSearch } = usePostsSearch(currentSearch);

  const toggleSort = () => {
    updateSearch(
      'sortDirection',
      currentSearch.sortDirection === 'asc' ? 'desc' : 'asc',
    );
  };

  return (
    <TooltipProvider>
      <Tooltip delayDuration={0}>
        <TooltipTrigger asChild onClick={(e) => e.preventDefault()}>
          <Button
            variant="link"
            className="w-12 border border-input hover:brightness-150"
            onClick={toggleSort}
          >
            {currentSearch.sortDirection === 'asc' ? (
              <ArrowUpIcon />
            ) : (
              <ArrowDownIcon />
            )}
          </Button>
        </TooltipTrigger>
        <TooltipContent
          side="top"
          align="center"
          sideOffset={4}
          className="bg-neutral-500 fill-neutral-500 duration-0"
        >
          <span>Sort by created date ({currentSearch.sortDirection})</span>
          <TooltipArrow width={15} height={10} className="duration-0" />
        </TooltipContent>
      </Tooltip>
    </TooltipProvider>
  );
};
</file>

<file path="apps/web/src/features/posts/hooks/use-create-post.ts">
import { useMutation } from '@tanstack/react-query';
import { TRPCClientError } from '@trpc/client';
import { toast } from 'sonner';
import { usePostActions } from './use-post-actions';
import { trpc } from '@/router';

export const useCreatePost = () => {
  const { refetchPosts } = usePostActions();

  const createPostMutation = useMutation(
    trpc.posts.create.mutationOptions({
      onSuccess: async () => {
        await refetchPosts();
        toast.success('Your post has been created!');
      },
      onError: (error) => {
        if (error instanceof TRPCClientError) {
          toast.error(error.message);
        } else {
          toast.error('An unknown error has occurred. Please try again!');
        }
      },
    }),
  );

  return {
    createPost: createPostMutation.mutateAsync,
    isCreating: createPostMutation.isPending,
    error: createPostMutation.error,
  };
};
</file>

<file path="apps/web/src/features/posts/hooks/use-post-actions.ts">
import { useMutation, useQuery } from '@tanstack/react-query';
import { toast } from 'sonner';
import { trpc } from '@/router';

export function usePostActions() {
  const getAllPostsQuery = useQuery(trpc.posts.all.queryOptions());

  const deletePostMutation = useMutation(
    trpc.posts.delete.mutationOptions({
      onError: (error) => {
        toast.error(error.message);
      },
      onSuccess: async () => {
        await getAllPostsQuery.refetch();
        toast.info('Post deleted successfully.');
      },
    }),
  );

  const createPostMutation = useMutation(
    trpc.posts.create.mutationOptions({
      onError: (error) => {
        toast.error(error.message);
      },
      onSuccess: async () => {
        await getAllPostsQuery.refetch();
        toast.success('Your post has been created!');
      },
    }),
  );

  return {
    posts: getAllPostsQuery.data,
    isLoadingPosts: getAllPostsQuery.isPending,

    refetchPosts: getAllPostsQuery.refetch,

    deletePost: deletePostMutation.mutate,
    isDeletingPost: deletePostMutation.isPending,

    createPost: createPostMutation.mutateAsync,
    isCreatingPost: createPostMutation.isPending,
  };
}
</file>

<file path="apps/web/src/features/posts/hooks/use-posts-navigation.ts">
import { useNavigate } from '@tanstack/react-router';
import {
  postsSearchDefaults,
  type PostsSearchParams,
} from '@/routes/_protected/posts/-validations/posts-link-options';

export const usePostsNavigation = () => {
  const navigate = useNavigate();

  const goToPostsList = (searchParams?: Partial<PostsSearchParams>) => {
    navigate({
      to: '/posts',
      search: { ...postsSearchDefaults, ...searchParams },
    });
  };

  const updateSearch = (name: keyof PostsSearchParams, value: unknown) => {
    navigate({
      from: '/posts',
      search: (prev) => ({ ...prev, [name]: value }),
    });
  };

  return {
    goToPostsList,
    updateSearch,
    defaultSearch: postsSearchDefaults,
  };
};
</file>

<file path="apps/web/src/features/posts/hooks/use-posts-search.ts">
import { usePostsNavigation } from './use-posts-navigation';
import { type PostsSearchParams } from '@/routes/_protected/posts/-validations/posts-link-options';

export const usePostsSearch = (currentSearch: PostsSearchParams) => {
  const { updateSearch } = usePostsNavigation();

  const filterPosts = <T extends { title: string; createdAt: Date }>(
    posts: T[],
  ) => {
    if (!posts?.length) return [];

    const lowercaseSearch = currentSearch.searchString.toLowerCase();

    return posts
      .filter((post) => post.title.toLowerCase().includes(lowercaseSearch))
      .sort((a, b) => {
        const timeA = a.createdAt.getTime();
        const timeB = b.createdAt.getTime();
        return currentSearch.sortDirection === 'asc'
          ? timeA - timeB
          : timeB - timeA;
      });
  };

  return {
    updateSearch,
    filterPosts,
    currentSearch,
  };
};
</file>

<file path=".dockerignore">
**/.cache/
**/.turbo/
**/.DS_Store

**/.env*

**/dist/
**/node_modules/
**/out/
</file>

<file path="apps/server/.env.example">
SERVER_AUTH_SECRET=please_change_this_in_production
SERVER_POSTGRES_URL=postgres://postgres:postgres@localhost:5432/postgres
SERVER_HOST=localhost 
SERVER_PORT=3035

# Frontend URL, used to configure trusted origin (cors)
PUBLIC_WEB_URL=http://localhost:8085
</file>

<file path="apps/server/Dockerfile">
FROM node:22-alpine AS base

ENV NODE_ENV=production

WORKDIR /app

# =========================================================================== #

FROM base AS builder-base

ENV TURBO_TELEMETRY_DISABLED=1
ENV PNPM_HOME="/pnpm"
ENV PATH="$PNPM_HOME:$PATH"
ENV CI=1

RUN corepack enable pnpm

# =========================================================================== #

FROM builder-base AS builder

RUN pnpm install --global turbo@^2

COPY . .

# https://turbo.build/repo/docs/guides/tools/docker#the-solution
RUN turbo prune server --docker

# =========================================================================== #

FROM builder-base AS installer

COPY --from=builder /app/out/json/ .
RUN pnpm install --frozen-lockfile

COPY --from=builder /app/out/full/ .
RUN pnpm build

# =========================================================================== #

FROM base AS production

RUN addgroup --system --gid 1001 nodejs \
    && adduser --system --uid 1001 hono

COPY --from=installer --chown=hono:nodejs /app/apps/server/dist /app/dist

USER hono

HEALTHCHECK --interval=30s --timeout=10s --retries=3 \
  CMD wget --quiet --spider http://${SERVER_HOST}:${SERVER_PORT}/healthcheck || exit 1

CMD ["node", "/app/dist/index.js"]
</file>

<file path="apps/server/eslint.config.js">
import baseConfig from '@repo/eslint-config/base';

/** @type {import('typescript-eslint').Config} */
export default [...baseConfig];
</file>

<file path="apps/server/package.json">
{
  "name": "server",
  "type": "module",
  "scripts": {
    "build": "tsup",
    "clean": "git clean -xdf .cache .turbo dist node_modules",
    "dev": "pnpm env:run tsx watch src/index.ts",
    "env:copy-example": "shx -- cp -n .env.example .env",
    "env:remove": "shx -- rm -f .env",
    "env:run": "dotenv --",
    "format": "prettier --check . --ignore-path ../../.gitignore",
    "lint": "eslint",
    "start": "NODE_ENV=production pnpm env:run node dist/index.js",
    "typecheck": "tsc --noEmit"
  },
  "prettier": "@repo/prettier-config",
  "dependencies": {
    "@hono/node-server": "catalog:",
    "@hono/trpc-server": "catalog:",
    "@repo/api": "workspace:*",
    "@repo/auth": "workspace:*",
    "@repo/db": "workspace:*",
    "hono": "catalog:",
    "valibot": "catalog:"
  },
  "devDependencies": {
    "@repo/eslint-config": "workspace:*",
    "@repo/prettier-config": "workspace:*",
    "@repo/typescript-config": "workspace:*",
    "@types/node": "catalog:",
    "dotenv-cli": "catalog:",
    "eslint": "catalog:",
    "shx": "catalog:",
    "tsup": "catalog:",
    "tsx": "catalog:",
    "typescript": "catalog:"
  }
}
</file>

<file path="apps/server/src/env.ts">
import * as v from 'valibot';

const DEFAULT_SERVER_PORT = 3035;
const DEFAULT_SERVER_HOST = 'localhost';

const createPortSchema = ({ defaultPort }: { defaultPort: number }) =>
  v.pipe(
    v.optional(v.string(), `${defaultPort}`),
    v.transform((s) => parseInt(s, 10)),
    v.integer(),
    v.minValue(0),
    v.maxValue(65535),
  );

export const envSchema = v.object({
  SERVER_PORT: createPortSchema({ defaultPort: DEFAULT_SERVER_PORT }),
  SERVER_HOST: v.pipe(
    v.optional(v.string(), DEFAULT_SERVER_HOST),
    v.minLength(1),
  ),
  SERVER_AUTH_SECRET: v.pipe(v.string(), v.minLength(1)),
  SERVER_POSTGRES_URL: v.string(),

  // Frontend URL, used to configure trusted origin (CORS)
  PUBLIC_WEB_URL: v.pipe(v.string(), v.url()),
});

export const env = v.parse(envSchema, process.env);
</file>

<file path="apps/server/src/index.ts">
import { serve } from '@hono/node-server';
import { trpcServer } from '@hono/trpc-server';
import { createApi } from '@repo/api/server';
import { createAuth } from '@repo/auth/server';
import { createDb } from '@repo/db/client';
import { Hono } from 'hono';
import { cors } from 'hono/cors';
import { logger } from 'hono/logger';
import { env } from './env';

const trustedOrigins = [env.PUBLIC_WEB_URL].map((url) => new URL(url).origin);

const wildcardPath = {
  ALL: '*',
  BETTER_AUTH: '/api/auth/*',
  TRPC: '/trpc/*',
} as const;

const db = createDb({ databaseUrl: env.SERVER_POSTGRES_URL });
const auth = createAuth({
  authSecret: env.SERVER_AUTH_SECRET,
  db,
  webUrl: env.PUBLIC_WEB_URL,
});
const api = createApi({ auth, db });

const app = new Hono<{
  Variables: {
    user: typeof auth.$Infer.Session.user | null;
    session: typeof auth.$Infer.Session.session | null;
  };
}>();

app.get('/healthcheck', (c) => {
  return c.text('OK');
});

app.use(logger());

app.use(
  wildcardPath.BETTER_AUTH,
  cors({
    origin: trustedOrigins,
    credentials: true,
    allowHeaders: ['Content-Type', 'Authorization'],
    allowMethods: ['POST', 'GET', 'OPTIONS'],
    exposeHeaders: ['Content-Length'],
    maxAge: 600,
  }),
);

app.use(
  wildcardPath.TRPC,
  cors({
    origin: trustedOrigins,
    credentials: true,
  }),
);

app.on(['POST', 'GET'], wildcardPath.BETTER_AUTH, (c) =>
  auth.handler(c.req.raw),
);

app.use(
  wildcardPath.TRPC,
  trpcServer({
    router: api.trpcRouter,
    createContext: (c) => api.createTRPCContext({ headers: c.req.headers }),
  }),
);

app.get('/', (c) => {
  return c.text('Hello Hono!');
});

const server = serve(
  {
    fetch: app.fetch,
    port: env.SERVER_PORT,
    hostname: env.SERVER_HOST,
  },
  (info) => {
    const host = info.family === 'IPv6' ? `[${info.address}]` : info.address;
    console.log(`Hono internal server: http://${host}:${info.port}`);
  },
);

const shutdown = () => {
  server.close((error) => {
    if (error) {
      console.error(error);
    } else {
      console.log('\nServer has stopped gracefully.');
    }
    process.exit(0);
  });
};

process.on('SIGINT', shutdown);
process.on('SIGTERM', shutdown);
</file>

<file path="apps/server/tsconfig.json">
{
  "extends": "@repo/typescript-config/base.json",
  "include": ["src"],
  "compilerOptions": {
    "types": ["node"],
    "jsxImportSource": "hono/jsx"
  }
}
</file>

<file path="apps/server/tsup.config.ts">
import { defineConfig } from 'tsup';

export default defineConfig({
  entry: ['./src/index.ts'],
  format: 'esm',
  noExternal: [/.*/],
  platform: 'node',
  splitting: false,
  bundle: true,
  outDir: './dist',
  clean: true,
  env: { IS_SERVER_BUILD: 'true' },
  loader: { '.json': 'copy' },
  minify: false,
  sourcemap: true,

  // https://github.com/egoist/tsup/issues/927#issuecomment-2416440833
  banner: ({ format }) => {
    if (format === 'esm')
      return {
        js: `import { createRequire } from 'module'; const require = createRequire(import.meta.url);`,
      };
    return {};
  },
});
</file>

<file path="apps/server/turbo.json">
{
  "$schema": "https://turborepo.org/schema.json",
  "extends": ["//"],
  "tasks": {
    "dev": {
      "env": ["SERVER_*", "PUBLIC_WEB_URL"],
      "inputs": ["$TURBO_DEFAULT$", ".env"],
      "persistent": true
    },
    "build": {
      "env": ["SERVER_*", "PUBLIC_WEB_URL"],
      "inputs": ["$TURBO_DEFAULT$", ".env"]
    },
    "start": {
      "env": ["SERVER_*", "PUBLIC_WEB_URL"],
      "persistent": true
    }
  }
}
</file>

<file path="apps/web/.env.example">
# Used for web application - this is the backend API server.
# This should be passed as a build-time variable (ARG) in docker.
PUBLIC_SERVER_URL=http://localhost:3035

# Used only to set default port/host in development (vite.config.ts)
PUBLIC_WEB_URL=http://localhost:8085
</file>

<file path="apps/web/.prettierignore">
**/src/routeTree.gen.ts
</file>

<file path="apps/web/Dockerfile">
FROM node:22-alpine AS base

WORKDIR /app

ENV NODE_ENV=production
ENV TURBO_TELEMETRY_DISABLED=1
ENV PNPM_HOME="/pnpm"
ENV PATH="$PNPM_HOME:$PATH"
ENV CI=1

RUN corepack enable pnpm

# =========================================================================== #

FROM base AS builder

RUN pnpm install --global turbo@^2

COPY . .

# https://turbo.build/repo/docs/guides/tools/docker#the-solution
RUN turbo prune web --docker

# =========================================================================== #

FROM base AS installer

ARG PUBLIC_SERVER_URL
ENV PUBLIC_SERVER_URL=${PUBLIC_SERVER_URL}

COPY --from=builder /app/out/json/ .
RUN pnpm install --frozen-lockfile

COPY --from=builder /app/out/full/ .
RUN pnpm build

# =========================================================================== #

FROM nginx:stable-alpine AS production

WORKDIR /app

COPY apps/web/nginx.conf /etc/nginx/nginx.conf
COPY --from=installer /app/apps/web/dist /usr/share/nginx/html

HEALTHCHECK --interval=30s --timeout=10s --retries=3 \
  CMD curl --fail --silent http://0.0.0.0:80/healthcheck || exit 1

CMD ["nginx", "-g", "daemon off;"]
</file>

<file path="apps/web/eslint.config.js">
import { restrictEnvAccess } from '@repo/eslint-config/base';
import reactConfig from '@repo/eslint-config/react';

/** @type {import("eslint").Linter.Config} */
export default [
  ...reactConfig,
  ...restrictEnvAccess,
  {
    files: ['vite.config.ts'],
    rules: {
      'no-restricted-properties': 'off',
    },
  },
];
</file>

<file path="apps/web/index.html">
<!doctype html>
<html lang="en">
  <head>
    <meta charset="UTF-8" />
    <link rel="icon" type="image/png" href="/favicon.png" />
    <meta name="viewport" content="width=device-width, initial-scale=1.0" />
    <script>
      (() => {
        /*
         * Avoid flickering screen when refreshing on dark mode
         * https://dev.to/izznatsir/flicker-free-dark-mode-in-vite-spa-180o
         */
        const classList = document.documentElement.classList;
        const style = document.documentElement.style;
        const dark = window.matchMedia('(prefers-color-scheme: dark)');

        const update = () => {
          if (
            localStorage.theme === 'dark' ||
            (!localStorage.theme && dark.matches)
          ) {
            classList.add('dark');
            style.colorScheme = 'dark';
          } else {
            classList.remove('dark');
            style.colorScheme = 'light';
          }
        };
        update();

        if (dark instanceof EventTarget) {
          dark.addEventListener('change', () => {
            delete localStorage.theme;
            update();
          });
        } else {
          dark.addListener(() => {
            delete localStorage.theme;
            update();
          });
        }
        window.addEventListener('storage', update);
      })();
    </script>
    <title>RT Stack</title>
  </head>

  <body>
    <div id="app"></div>
    <script type="module" src="/src/main.tsx"></script>
  </body>
</html>
</file>

<file path="apps/web/nginx.conf">
worker_processes 4;

events {
  worker_connections 1024;
}

http {
  include mime.types;

  default_type  application/octet-stream;

  set_real_ip_from        0.0.0.0/0;
  real_ip_recursive       on;
  real_ip_header          X-Forward-For;
  limit_req_zone          $binary_remote_addr zone=mylimit:10m rate=10r/s;

  access_log /dev/stdout;
  error_log /dev/stderr;

  server {
    listen 80;

    location / {
      root   /usr/share/nginx/html;
      index  index.html index.htm;
      try_files $uri $uri/ /index.html;
    }
  }
}
</file>

<file path="apps/web/package.json">
{
  "name": "web",
  "version": "0.0.0",
  "private": true,
  "type": "module",
  "scripts": {
    "build": "pnpm env:run build",
    "clean": "git clean -xdf .cache dist .turbo node_modules",
    "dev": "pnpm env:run dev",
    "env:copy-example": "shx -- cp -n .env.example .env",
    "env:remove": "shx -- rm -f .env",
    "env:run": "dotenv -- vite --configLoader runner",
    "format": "prettier --check . --ignore-path .prettierignore --ignore-path ../../.gitignore",
    "lint": "eslint \"src/**/*.{ts,tsx}\"",
    "preview": "pnpm env:run preview",
    "start": "pnpm env:run",
    "typecheck": "tsc --build"
  },
  "dependencies": {
    "@radix-ui/react-icons": "catalog:",
    "@repo/auth": "workspace:*",
    "@repo/ui": "workspace:*",
    "@tailwindcss/vite": "catalog:",
    "@tanstack/react-form": "catalog:",
    "@tanstack/react-query": "catalog:",
    "@tanstack/react-router": "catalog:",
    "@tanstack/router-devtools": "catalog:",
    "@trpc/client": "catalog:",
    "@trpc/tanstack-react-query": "catalog:",
    "dotenv-cli": "catalog:",
    "next-themes": "catalog:",
    "react": "catalog:",
    "react-dom": "catalog:",
    "sonner": "catalog:",
    "tailwindcss": "catalog:",
    "valibot": "catalog:"
  },
  "prettier": "@repo/prettier-config",
  "devDependencies": {
    "@repo/api": "workspace:*",
    "@repo/eslint-config": "workspace:*",
    "@repo/prettier-config": "workspace:*",
    "@repo/tailwind-config": "workspace:*",
    "@repo/typescript-config": "workspace:*",
    "@tanstack/router-plugin": "catalog:",
    "@trpc/server": "catalog:",
    "@types/node": "catalog:",
    "@types/react": "catalog:",
    "@types/react-dom": "catalog:",
    "@vitejs/plugin-react-swc": "catalog:",
    "eslint": "catalog:",
    "shx": "catalog:",
    "typescript": "catalog:",
    "vite": "catalog:"
  }
}
</file>

<file path="apps/web/public/healthcheck">
OK
</file>

<file path="apps/web/src/clients/authClient.ts">
import { createAuthClient } from '@repo/auth/client';
import { env } from '@/env';

export const authClient = createAuthClient({
  apiBaseUrl: env.PUBLIC_SERVER_URL,
});

export type AuthSession =
  | ReturnType<typeof createAuthClient>['$Infer']['Session']
  | null;
</file>

<file path="apps/web/src/clients/queryClient.ts">
import { QueryClient } from '@tanstack/react-query';

export const queryClient = new QueryClient();
</file>

<file path="apps/web/src/clients/trpcClient.ts">
import { createTrpcClient } from '@repo/api/client';
import { env } from '@/env';

export const trpcClient = createTrpcClient({
  serverUrl: env.PUBLIC_SERVER_URL,
});
</file>

<file path="apps/web/src/env.ts">
import * as v from 'valibot';

export const CLIENT_ENV_PREFIX = 'PUBLIC_';

export const envSchema = v.object({
  /**
   * This is the backend API server. Note that this should be passed as
   * a build-time variable (ARG) in docker.
   */
  PUBLIC_SERVER_URL: v.pipe(v.string(), v.url()),

  /**
   * Set this if you want to run or deploy your app at a base URL. This is
   * usually required for deploying a repository to Github/Gitlab pages.
   */
  PUBLIC_BASE_PATH: v.pipe(v.optional(v.string(), '/'), v.startsWith('/')),
});

export const env = v.parse(envSchema, import.meta.env);
</file>

<file path="apps/web/src/main.tsx">
import '@/style.css';
import { RouterProvider } from '@tanstack/react-router';
import { ThemeProvider } from 'next-themes';
import React from 'react';
import ReactDOM from 'react-dom/client';
import { createRouter } from '@/router';

const ROOT_ELEMENT_ID = 'app';

const rootElement = document.getElementById(ROOT_ELEMENT_ID);

if (!rootElement) {
  throw new Error(`Root element with ID '${ROOT_ELEMENT_ID}' not found.`);
}

const router = createRouter();

if (!rootElement.innerHTML) {
  const root = ReactDOM.createRoot(rootElement);
  root.render(
    <React.StrictMode>
      <ThemeProvider
        attribute="class"
        defaultTheme="system"
        themes={['light', 'dark']}
        enableSystem
        disableTransitionOnChange
      >
        <RouterProvider router={router} />
      </ThemeProvider>
    </React.StrictMode>,
  );
}
</file>

<file path="apps/web/src/router.tsx">
import { QueryClientProvider } from '@tanstack/react-query';
import { createRouter as createTanstackRouter } from '@tanstack/react-router';
import { createTRPCOptionsProxy } from '@trpc/tanstack-react-query';
import type { AppRouter } from '@repo/api/server';
import { queryClient } from '@/clients/queryClient';
import { trpcClient } from '@/clients/trpcClient';
import { env } from '@/env';
import { routeTree } from '@/routeTree.gen';
import Spinner from '@/routes/-components/common/spinner';

export const trpc = createTRPCOptionsProxy<AppRouter>({
  client: trpcClient,
  queryClient,
});

export function createRouter() {
  const router = createTanstackRouter({
    routeTree,
    basepath: env.PUBLIC_BASE_PATH,
    scrollRestoration: true,
    defaultPreload: 'intent',
    defaultPendingComponent: () => <Spinner />,
    Wrap: function WrapComponent({ children }) {
      return (
        <QueryClientProvider client={queryClient}>
          {children}
        </QueryClientProvider>
      );
    },
  });
  return router;
}

declare module '@tanstack/react-router' {
  interface Register {
    router: ReturnType<typeof createRouter>;
  }
}
</file>

<file path="apps/web/src/routes/__root.tsx">
import { Toaster } from '@repo/ui/components/sonner';
import { Outlet, createRootRoute } from '@tanstack/react-router';
import React from 'react';
import { authClient } from '@/clients/authClient';
import Spinner from '@/routes/-components/common/spinner';
import NavContainer from '@/routes/-components/layout/nav/nav-container';
import { Navbar } from '@/routes/-components/layout/nav/navbar';

export const Route = createRootRoute({
  component: RootComponent,
});

// https://tanstack.com/router/v1/docs/framework/react/devtools
const TanStackRouterDevtools = import.meta.env.PROD
  ? () => null
  : React.lazy(() =>
      import('@tanstack/router-devtools').then((res) => ({
        default: res.TanStackRouterDevtools,
      })),
    );

function RootComponent() {
  const { data: session, isPending } = authClient.useSession();

  if (isPending) {
    return (
      <NavContainer>
        <Spinner />
      </NavContainer>
    );
  }

  return (
    <>
      <Navbar session={session} />
      <Toaster />
      <div className="p-2 md:p-4">
        <Outlet />
      </div>
      <React.Suspense>
        <TanStackRouterDevtools position="bottom-right" />
      </React.Suspense>
    </>
  );
}
</file>

<file path="apps/web/src/routes/_protected/layout.tsx">
import { Outlet, createFileRoute } from '@tanstack/react-router';
import { ProtectedRoute } from '@/features/auth/guards/protected-route';

export const Route = createFileRoute('/_protected')({
  component: Layout,
});

function Layout() {
  return (
    <ProtectedRoute>
      <Outlet />
    </ProtectedRoute>
  );
}
</file>

<file path="apps/web/src/routes/_protected/posts/-validations/posts-link-options.ts">
import { linkOptions } from '@tanstack/react-router';
import * as v from 'valibot';

export const postsSearchSchema = v.object({
  searchString: v.fallback(v.string(), ''),
  sortDirection: v.fallback(v.picklist(['asc', 'desc']), 'desc'),
});

export type PostsSearchParams = v.InferOutput<typeof postsSearchSchema>;

export const postsSearchDefaults = v.getFallbacks(postsSearchSchema);

export const postsLinkOptions = linkOptions({
  to: '/posts',
  search: postsSearchDefaults,
});
</file>

<file path="apps/web/src/routes/_protected/posts/$postid/index.tsx">
import { ArrowLeftIcon, ReloadIcon } from '@radix-ui/react-icons';
import { Button } from '@repo/ui/components/button';
import {
  TooltipProvider,
  Tooltip,
  TooltipTrigger,
  TooltipContent,
  TooltipArrow,
} from '@repo/ui/components/tooltip';
import { createFileRoute, Link } from '@tanstack/react-router';
import { postsLinkOptions } from '../-validations/posts-link-options';
import { queryClient } from '@/clients/queryClient';
import { trpc } from '@/router';

export const Route = createFileRoute('/_protected/posts/$postid/')({
  loader: ({ params }) =>
    queryClient.ensureQueryData(
      trpc.posts.one.queryOptions({ id: params.postid }),
    ),
  component: RouteComponent,
  errorComponent: ({ error, reset }) => {
    return (
      <div className="flex flex-col items-center w-full gap-y-3">
        <div>{error.message}</div>
        <div className="flex gap-2">
          <Button asChild variant="outline" className="w-full">
            <Link {...postsLinkOptions}>
              <ArrowLeftIcon />
              Go Back
            </Link>
          </Button>
          <Button
            variant="secondary"
            onClick={() => {
              // Reset the router error boundary
              reset();
            }}
            className="w-full"
          >
            Retry? <ReloadIcon />
          </Button>
        </div>
      </div>
    );
  },
});

function RouteComponent() {
  const post = Route.useLoaderData();

  return (
    <div className="flex flex-col px-4 w-full max-w-6xl mx-auto break-words">
      <div className="text-center p-5 rounded-2xl">
        <h1 className="text-2xl md:text-4xl font-bold">{post.title}</h1>
        <div className="inline-block bg-blue-100 text-blue-800 text-sm px-3 py-1 rounded-full mt-2">
          {post.category}
        </div>
        <p className="text-sm text-gray-500 mt-2">
          Created by <span className="font-medium">{post.author.name}</span>,{' '}
          {post.createdAt.toLocaleString()}
        </p>
      </div>
      <hr className="border border-gray-500 mt-3" />

      <TooltipProvider delayDuration={0}>
        <Tooltip>
          <TooltipTrigger asChild>
            <Button
              asChild
              variant="link"
              className="w-12 border border-gray-500 mt-6 hover:brightness-150"
            >
              <Link {...postsLinkOptions}>
                <ArrowLeftIcon />
              </Link>
            </Button>
          </TooltipTrigger>
          <TooltipContent
            side="right"
            align="center"
            sideOffset={4}
            className="bg-neutral-500 fill-neutral-500 duration-0"
          >
            <span>View all posts</span>
            <TooltipArrow width={15} height={10} className="duration-0" />
          </TooltipContent>
        </Tooltip>
      </TooltipProvider>

      <div className="bg-elevated shadow rounded-2xl p-6 w-full min-h-96 border border-gray-500 break-words mt-6">
        <p className="leading-relaxed whitespace-break-spaces">
          {post.content ?? 'No content available.'}
        </p>
      </div>
    </div>
  );
}
</file>

<file path="apps/web/src/routes/_protected/posts/index.tsx">
import { createFileRoute } from '@tanstack/react-router';

import { postsSearchSchema } from './-validations/posts-link-options';
import { CreatePostDialog } from '@/features/posts/components/create-post-dialog';
import { PostCard } from '@/features/posts/components/post-card';
import { PostsSearchBar } from '@/features/posts/components/posts-search-bar';
import { PostsSortButton } from '@/features/posts/components/posts-sort-button';
import { usePostActions } from '@/features/posts/hooks/use-post-actions';
import { usePostsSearch } from '@/features/posts/hooks/use-posts-search';

export const Route = createFileRoute('/_protected/posts/')({
  validateSearch: postsSearchSchema,
  component: RouteComponent,
});

function RouteComponent() {
  const { posts, isLoadingPosts } = usePostActions();
  const search = Route.useSearch();
  const { filterPosts } = usePostsSearch(search);

  const filteredPosts = filterPosts(posts || []);

  return (
    <div className="flex flex-col md:p-4 w-full max-w-6xl mx-auto">
      <div className="flex items-center justify-between">
        <h1 className="text-2xl">Posts</h1>
        <CreatePostDialog />
      </div>

      <div className="mt-4 flex justify-end items-center gap-x-2">
        <PostsSortButton currentSearch={search} />
        <PostsSearchBar currentSearch={search} />
      </div>

      <div className="flex gap-3 flex-wrap mt-6">
        {filteredPosts.length
          ? filteredPosts.map((post) => (
              <PostCard key={post.id} post={post} disabled={isLoadingPosts} />
            ))
          : 'No posts found.'}
      </div>
    </div>
  );
}
</file>

<file path="apps/web/src/routes/_public/layout.tsx">
import { Outlet, createFileRoute } from '@tanstack/react-router';
import { PublicRoute } from '@/features/auth/guards/public-route';

export const Route = createFileRoute('/_public')({
  component: Layout,
});

function Layout() {
  return (
    <PublicRoute>
      <Outlet />
    </PublicRoute>
  );
}
</file>

<file path="apps/web/src/routes/_public/login.tsx">
import { createFileRoute, Link } from '@tanstack/react-router';
import { LoginForm } from '@/features/auth/components/login-form';

export const Route = createFileRoute('/_public/login')({
  component: RouteComponent,
});

function RouteComponent() {
  return (
    <div className="p-2 md:p-6 flex flex-col items-center">
      <div className="border p-4 md:p-8 w-full max-w-md rounded-lg bg-elevated">
        <LoginForm />
        <div className="mt-4 text-center">
          {"Don't have an account? "}
          <Link to="/register" className="underline">
            Register
          </Link>
          !
        </div>
      </div>
    </div>
  );
}
</file>

<file path="apps/web/src/routes/_public/register.tsx">
import { createFileRoute, Link } from '@tanstack/react-router';
import { RegisterForm } from '@/features/auth/components/register-form';

export const Route = createFileRoute('/_public/register')({
  component: RouteComponent,
});

function RouteComponent() {
  return (
    <div className="p-2 md:p-6 flex flex-col items-center">
      <div className="border p-4 md:p-8 w-full max-w-md rounded-lg bg-elevated">
        <RegisterForm />
        <div className="mt-4 text-center">
          Already have an account?{' '}
          <Link to="/login" className="underline">
            Log in
          </Link>
          !
        </div>
      </div>
    </div>
  );
}
</file>

<file path="apps/web/src/routes/-components/common/form-field-info.tsx">
import type { AnyFieldApi } from '@tanstack/react-form';

export default function FormFieldInfo({ field }: { field: AnyFieldApi }) {
  return (
    <div className="mt-2">
      {field.state.meta.isTouched && field.state.meta.errors.length ? (
        <em className="text-red-500">
          {field.state.meta.errors.map((e) => e.message).join(', ')}
        </em>
      ) : null}
      {field.state.meta.isValidating ? 'Validating...' : null}
    </div>
  );
}
</file>

<file path="apps/web/src/routes/-components/common/spinner.tsx">
import { GearIcon } from '@radix-ui/react-icons';
import { cn } from '@repo/ui/lib/utils';

function Spinner({ className }: Readonly<{ className?: string }>) {
  return (
    <div className={cn('inline-block animate-spin duration-500', className)}>
      <GearIcon />
    </div>
  );
}

export default Spinner;
</file>

<file path="apps/web/src/routes/-components/layout/nav/nav-container.tsx">
import type { ReactNode } from 'react';

export default function NavContainer({
  children,
}: Readonly<{
  children?: ReactNode;
}>) {
  return (
    <div className="px-2 md:px-4 flex items-center justify-between text-lg bg-nav h-12">
      {children}
    </div>
  );
}
</file>

<file path="apps/web/src/routes/-components/layout/nav/navbar.tsx">
import { Link } from '@tanstack/react-router';
import type { AuthSession } from '@/clients/authClient';
import { UserAvatar } from '@/features/auth/components/user-avatar';
import NavContainer from '@/routes/-components/layout/nav/nav-container';
import { postsLinkOptions } from '@/routes/_protected/posts/-validations/posts-link-options';

const activeClassName = 'underline decoration-2 opacity-70';

export function Navbar({ session }: Readonly<{ session: AuthSession }>) {
  return (
    <NavContainer>
      <div className="flex gap-x-4">
        <Link
          to="/"
          activeProps={{ className: activeClassName }}
          activeOptions={{ exact: true }}
        >
          Home
        </Link>
        {session?.user ? <Link {...postsLinkOptions}>Posts</Link> : null}
      </div>
      {session?.user ? (
        <UserAvatar />
      ) : (
        <div className="flex gap-x-2 justify-between">
          <Link
            to="/login"
            activeProps={{ className: activeClassName }}
            activeOptions={{ exact: true }}
          >
            Login
          </Link>
          <span>|</span>
          <Link
            to="/register"
            activeProps={{ className: activeClassName }}
            activeOptions={{ exact: true }}
          >
            Register
          </Link>
        </div>
      )}
    </NavContainer>
  );
}
</file>

<file path="apps/web/src/routes/index.tsx">
import { Link2Icon, MoonIcon, SunIcon } from '@radix-ui/react-icons';
import { Button } from '@repo/ui/components/button';
import { createFileRoute, Link } from '@tanstack/react-router';
import { useTheme } from 'next-themes';
import { authClient } from '@/clients/authClient';
import { postsLinkOptions } from '@/routes/_protected/posts/-validations/posts-link-options';

export const Route = createFileRoute('/')({
  component: RouteComponent,
});

function RouteComponent() {
  const { data: session } = authClient.useSession();
  const { resolvedTheme, setTheme } = useTheme();

  return (
    <div className="mt-1">
      {session?.user && (
        <>
          <div className="flex flex-col mb-5 bg-elevated p-3">
            <div>
              Welcome, <span className="font-bold">{session.user.name}</span>!
            </div>
            <div className="mt-3 flex gap-x-1.5">
              Click{' '}
              <Link
                {...postsLinkOptions}
                className="flex items-center gap-x-1 text-blue-500 underline"
              >
                here <Link2Icon className="mt-0.5" />
              </Link>{' '}
              to view your posts.
            </div>
          </div>
        </>
      )}
      <div>
        This is the live demo for{' '}
        <a
          className="text-blue-500 underline brightness-125"
          target="_blank"
          href="https://github.com/nktnet1/rt-stack"
          rel="noreferrer"
        >
          RT Stack
        </a>
        .
      </div>
      {!session?.user && (
        <div className="mt-4">
          Please{' '}
          <Link to="/login" className="underline font-bold">
            log in
          </Link>
          .
        </div>
      )}

      <div className="mt-3 flex items-center gap-x-2">
        Toggle theme:
        <Button
          className="w-9 h-9 rounded-full border-2 border-gray-500"
          variant="ghost"
          onClick={() => setTheme(resolvedTheme === 'dark' ? 'light' : 'dark')}
        >
          {resolvedTheme === 'dark' ? (
            <MoonIcon className="text-yellow-300" />
          ) : (
            <SunIcon className="text-red-600" />
          )}
        </Button>
      </div>
    </div>
  );
}
</file>

<file path="apps/web/src/routeTree.gen.ts">
/* eslint-disable */

// @ts-nocheck

// noinspection JSUnusedGlobalSymbols

// This file was automatically generated by TanStack Router.
// You should NOT make any changes in this file as it will be overwritten.
// Additionally, you should also exclude this file from your linter and/or formatter to prevent it from being checked or modified.

// Import Routes

import { Route as rootRoute } from './routes/__root'
import { Route as PublicLayoutImport } from './routes/_public/layout'
import { Route as ProtectedLayoutImport } from './routes/_protected/layout'
import { Route as IndexImport } from './routes/index'
import { Route as PublicRegisterImport } from './routes/_public/register'
import { Route as PublicLoginImport } from './routes/_public/login'
import { Route as ProtectedPostsIndexImport } from './routes/_protected/posts/index'
import { Route as ProtectedPostsPostidIndexImport } from './routes/_protected/posts/$postid/index'

// Create/Update Routes

const PublicLayoutRoute = PublicLayoutImport.update({
  id: '/_public',
  getParentRoute: () => rootRoute,
} as any)

const ProtectedLayoutRoute = ProtectedLayoutImport.update({
  id: '/_protected',
  getParentRoute: () => rootRoute,
} as any)

const IndexRoute = IndexImport.update({
  id: '/',
  path: '/',
  getParentRoute: () => rootRoute,
} as any)

const PublicRegisterRoute = PublicRegisterImport.update({
  id: '/register',
  path: '/register',
  getParentRoute: () => PublicLayoutRoute,
} as any)

const PublicLoginRoute = PublicLoginImport.update({
  id: '/login',
  path: '/login',
  getParentRoute: () => PublicLayoutRoute,
} as any)

const ProtectedPostsIndexRoute = ProtectedPostsIndexImport.update({
  id: '/posts/',
  path: '/posts/',
  getParentRoute: () => ProtectedLayoutRoute,
} as any)

const ProtectedPostsPostidIndexRoute = ProtectedPostsPostidIndexImport.update({
  id: '/posts/$postid/',
  path: '/posts/$postid/',
  getParentRoute: () => ProtectedLayoutRoute,
} as any)

// Populate the FileRoutesByPath interface

declare module '@tanstack/react-router' {
  interface FileRoutesByPath {
    '/': {
      id: '/'
      path: '/'
      fullPath: '/'
      preLoaderRoute: typeof IndexImport
      parentRoute: typeof rootRoute
    }
    '/_protected': {
      id: '/_protected'
      path: ''
      fullPath: ''
      preLoaderRoute: typeof ProtectedLayoutImport
      parentRoute: typeof rootRoute
    }
    '/_public': {
      id: '/_public'
      path: ''
      fullPath: ''
      preLoaderRoute: typeof PublicLayoutImport
      parentRoute: typeof rootRoute
    }
    '/_public/login': {
      id: '/_public/login'
      path: '/login'
      fullPath: '/login'
      preLoaderRoute: typeof PublicLoginImport
      parentRoute: typeof PublicLayoutImport
    }
    '/_public/register': {
      id: '/_public/register'
      path: '/register'
      fullPath: '/register'
      preLoaderRoute: typeof PublicRegisterImport
      parentRoute: typeof PublicLayoutImport
    }
    '/_protected/posts/': {
      id: '/_protected/posts/'
      path: '/posts'
      fullPath: '/posts'
      preLoaderRoute: typeof ProtectedPostsIndexImport
      parentRoute: typeof ProtectedLayoutImport
    }
    '/_protected/posts/$postid/': {
      id: '/_protected/posts/$postid/'
      path: '/posts/$postid'
      fullPath: '/posts/$postid'
      preLoaderRoute: typeof ProtectedPostsPostidIndexImport
      parentRoute: typeof ProtectedLayoutImport
    }
  }
}

// Create and export the route tree

interface ProtectedLayoutRouteChildren {
  ProtectedPostsIndexRoute: typeof ProtectedPostsIndexRoute
  ProtectedPostsPostidIndexRoute: typeof ProtectedPostsPostidIndexRoute
}

const ProtectedLayoutRouteChildren: ProtectedLayoutRouteChildren = {
  ProtectedPostsIndexRoute: ProtectedPostsIndexRoute,
  ProtectedPostsPostidIndexRoute: ProtectedPostsPostidIndexRoute,
}

const ProtectedLayoutRouteWithChildren = ProtectedLayoutRoute._addFileChildren(
  ProtectedLayoutRouteChildren,
)

interface PublicLayoutRouteChildren {
  PublicLoginRoute: typeof PublicLoginRoute
  PublicRegisterRoute: typeof PublicRegisterRoute
}

const PublicLayoutRouteChildren: PublicLayoutRouteChildren = {
  PublicLoginRoute: PublicLoginRoute,
  PublicRegisterRoute: PublicRegisterRoute,
}

const PublicLayoutRouteWithChildren = PublicLayoutRoute._addFileChildren(
  PublicLayoutRouteChildren,
)

export interface FileRoutesByFullPath {
  '/': typeof IndexRoute
  '': typeof PublicLayoutRouteWithChildren
  '/login': typeof PublicLoginRoute
  '/register': typeof PublicRegisterRoute
  '/posts': typeof ProtectedPostsIndexRoute
  '/posts/$postid': typeof ProtectedPostsPostidIndexRoute
}

export interface FileRoutesByTo {
  '/': typeof IndexRoute
  '': typeof PublicLayoutRouteWithChildren
  '/login': typeof PublicLoginRoute
  '/register': typeof PublicRegisterRoute
  '/posts': typeof ProtectedPostsIndexRoute
  '/posts/$postid': typeof ProtectedPostsPostidIndexRoute
}

export interface FileRoutesById {
  __root__: typeof rootRoute
  '/': typeof IndexRoute
  '/_protected': typeof ProtectedLayoutRouteWithChildren
  '/_public': typeof PublicLayoutRouteWithChildren
  '/_public/login': typeof PublicLoginRoute
  '/_public/register': typeof PublicRegisterRoute
  '/_protected/posts/': typeof ProtectedPostsIndexRoute
  '/_protected/posts/$postid/': typeof ProtectedPostsPostidIndexRoute
}

export interface FileRouteTypes {
  fileRoutesByFullPath: FileRoutesByFullPath
  fullPaths: '/' | '' | '/login' | '/register' | '/posts' | '/posts/$postid'
  fileRoutesByTo: FileRoutesByTo
  to: '/' | '' | '/login' | '/register' | '/posts' | '/posts/$postid'
  id:
    | '__root__'
    | '/'
    | '/_protected'
    | '/_public'
    | '/_public/login'
    | '/_public/register'
    | '/_protected/posts/'
    | '/_protected/posts/$postid/'
  fileRoutesById: FileRoutesById
}

export interface RootRouteChildren {
  IndexRoute: typeof IndexRoute
  ProtectedLayoutRoute: typeof ProtectedLayoutRouteWithChildren
  PublicLayoutRoute: typeof PublicLayoutRouteWithChildren
}

const rootRouteChildren: RootRouteChildren = {
  IndexRoute: IndexRoute,
  ProtectedLayoutRoute: ProtectedLayoutRouteWithChildren,
  PublicLayoutRoute: PublicLayoutRouteWithChildren,
}

export const routeTree = rootRoute
  ._addFileChildren(rootRouteChildren)
  ._addFileTypes<FileRouteTypes>()

/* ROUTE_MANIFEST_START
{
  "routes": {
    "__root__": {
      "filePath": "__root.tsx",
      "children": [
        "/",
        "/_protected",
        "/_public"
      ]
    },
    "/": {
      "filePath": "index.tsx"
    },
    "/_protected": {
      "filePath": "_protected/layout.tsx",
      "children": [
        "/_protected/posts/",
        "/_protected/posts/$postid/"
      ]
    },
    "/_public": {
      "filePath": "_public/layout.tsx",
      "children": [
        "/_public/login",
        "/_public/register"
      ]
    },
    "/_public/login": {
      "filePath": "_public/login.tsx",
      "parent": "/_public"
    },
    "/_public/register": {
      "filePath": "_public/register.tsx",
      "parent": "/_public"
    },
    "/_protected/posts/": {
      "filePath": "_protected/posts/index.tsx",
      "parent": "/_protected"
    },
    "/_protected/posts/$postid/": {
      "filePath": "_protected/posts/$postid/index.tsx",
      "parent": "/_protected"
    }
  }
}
ROUTE_MANIFEST_END */
</file>

<file path="apps/web/src/style.css">
@import 'tailwindcss';
@import '@repo/tailwind-config/style.css';

/**
 * This is necessary to load the @repo/ui package when moving from
 * @tailwindcss/vite v4.0.7 to v4.0.8.
 *
 * For more details, see:
 * https://github.com/tailwindlabs/tailwindcss/issues/16733
 */
@source '../../../packages/ui';
</file>

<file path="apps/web/src/vite-env.d.ts">
/// <reference types="vite/client" />
</file>

<file path="apps/web/tsconfig.app.json">
{
  "extends": "@repo/typescript-config/vite.json",
  "include": ["src/**/*.ts", "src/**/*.tsx", "src/style.css", "env.ts"],
  "compilerOptions": {
    "target": "ES2020",
    "useDefineForClassFields": true,
    "lib": ["ES2020", "DOM", "DOM.Iterable"],
    "module": "ESNext",
    "jsx": "react-jsx",
    "paths": {
      "@/*": ["./src/*"]
    }
  }
}
</file>

<file path="apps/web/tsconfig.json">
{
  "files": [],
  "references": [
    { "path": "./tsconfig.app.json" },
    { "path": "./tsconfig.node.json" }
  ]
}
</file>

<file path="apps/web/tsconfig.node.json">
{
  "extends": "@repo/typescript-config/base.json",
  "include": ["vite.config.ts"],
  "compilerOptions": {
    "tsBuildInfoFile": "./node_modules/.tmp/tsconfig.node.tsbuildinfo",
    "target": "ES2022",
    "lib": ["ES2023"],
    "module": "ESNext"
  }
}
</file>

<file path="apps/web/turbo.json">
{
  "$schema": "https://turborepo.org/schema.json",
  "extends": ["//"],
  "tasks": {
    "dev": {
      "env": ["PUBLIC_*", "PROD"],
      "inputs": ["$TURBO_DEFAULT$", ".env"],
      "persistent": true
    },
    "build": {
      "env": ["PUBLIC_*", "PROD"],
      "inputs": ["$TURBO_DEFAULT$", ".env"]
    },
    "start": {
      "env": ["PUBLIC_*", "PROD"],
      "persistent": true
    }
  }
}
</file>

<file path="apps/web/vite.config.ts">
import path from 'node:path';
import { fileURLToPath } from 'node:url';
import tailwindcss from '@tailwindcss/vite';
import { TanStackRouterVite } from '@tanstack/router-plugin/vite';
import react from '@vitejs/plugin-react-swc';
import * as v from 'valibot';
import { defineConfig } from 'vite';

/**
 * Fixes issue with "__dirname is not defined in ES module scope"
 * https://flaviocopes.com/fix-dirname-not-defined-es-module-scope
 *
 * This is only necessary when using vite with `--configLoader runner`.
 * We use this option to allow for importing TS files from monorepos.
 * https://vite.dev/config/#configuring-vite
 */
const __filename = fileURLToPath(import.meta.url);
const __dirname = path.dirname(__filename);

const envSchema = v.object({
  /**
   * Since vite is only used during development, we can assume the structure
   * will resemble a URL such as: http://localhost:3035.
   * This will then be used to set the vite dev server's host and port.
   */
  PUBLIC_WEB_URL: v.pipe(
    v.optional(v.string(), 'http://localhost:3035'),
    v.url(),
  ),

  /**
   * Set this if you want to run or deploy your app at a base URL. This is
   * usually required for deploying a repository to Github/Gitlab pages.
   */
  PUBLIC_BASE_PATH: v.pipe(v.optional(v.string(), '/'), v.startsWith('/')),
});

const env = v.parse(envSchema, process.env);
const webUrl = new URL(env.PUBLIC_WEB_URL);
const host = webUrl.hostname;
const port = parseInt(webUrl.port, 10);

export default defineConfig({
  plugins: [
    TanStackRouterVite({
      routeToken: 'layout',
      autoCodeSplitting: true,
    }),
    tailwindcss(),
    react(),
  ],
  base: env.PUBLIC_BASE_PATH,
  envPrefix: 'PUBLIC_',
  server: {
    host,
    port,
    strictPort: true,
  },
  build: {
    rollupOptions: {
      output: {
        /**
         * Modified from:
         * https://github.com/vitejs/vite/discussions/9440#discussioncomment-11430454
         */
        manualChunks(id) {
          if (id.includes('node_modules')) {
            const modulePath = id.split('node_modules/')[1];
            const topLevelFolder = modulePath?.split('/')[0];
            if (topLevelFolder !== '.pnpm') {
              return topLevelFolder;
            }
            const scopedPackageName = modulePath?.split('/')[1];
            const chunkName =
              scopedPackageName?.split('@')[
                scopedPackageName.startsWith('@') ? 1 : 0
              ];
            return chunkName;
          }
        },
      },
    },
  },
  resolve: {
    alias: {
      '@': path.resolve(__dirname, './src'),
    },
  },
});
</file>

<file path="compose.yaml">
services:
  web:
    build:
      context: .
      dockerfile: ./apps/web/Dockerfile
      args:
        # Backend API server - used at build time to create the bundle
        PUBLIC_SERVER_URL: http://localhost:3035
    ports:
      - 8085:80
    healthcheck:
      interval: 30s
      timeout: 10s
      retries: 3
      test:
        ['CMD-SHELL', 'curl --fail --silent http://localhost:80/healthcheck']
    depends_on:
      - server

  server:
    build:
      context: .
      dockerfile: ./apps/server/Dockerfile
    ports:
      - 3035:3000
    environment:
      - SERVER_AUTH_SECRET=${SERVER_AUTH_SECRET:-please_change_this_in_production}
      - SERVER_POSTGRES_URL=postgres://postgres:postgres@db:5432/postgres
      - SERVER_HOST=0.0.0.0
      - SERVER_PORT=3000
      - PUBLIC_WEB_URL=http://localhost:8085
    healthcheck:
      interval: 30s
      timeout: 10s
      retries: 3
      test:
        [
          'CMD-SHELL',
          'wget --quiet --spider http://$$SERVER_HOST:$$SERVER_PORT/healthcheck',
        ]
    depends_on:
      - db

  db:
    image: docker.io/postgres:latest
    ports:
      - 5432:5432
    command: ['postgres', '-c', 'log_statement=all']
    environment:
      - POSTGRES_USER=postgres
      - POSTGRES_PASSWORD=postgres
      - POSTGRES_DB=postgres
    volumes:
      - postgres_data:/var/lib/postgresql/data
    healthcheck:
      interval: 30s
      timeout: 10s
      retries: 3
      test: ['CMD', 'pg_isready', '-U', 'postgres', '-d', 'postgres']

  drizzle:
    restart: 'no'
    command: /bin/sh
    build:
      context: .
      dockerfile: ./packages/db/Dockerfile
    environment:
      - DB_POSTGRES_URL=postgres://postgres:postgres@db:5432/postgres
      - TURBO_UI=true
    profiles:
      # Using profiles to avoid starting this container by default.
      # We only use this to run `pnpm db:push`
      - drizzle

volumes:
  postgres_data:
</file>

<file path="LICENSE">
Copyright (c) 2025 Khiet Tam Nguyen

Permission is hereby granted, free of charge, to any person obtaining a copy of
this software and associated documentation files (the “Software”), to deal in
the Software without restriction, including without limitation the rights to
use, copy, modify, merge, publish, distribute, sublicense, and/or sell copies of
the Software, and to permit persons to whom the Software is furnished to do so,
subject to the following conditions:

The above copyright notice and this permission notice shall be included in all
copies or substantial portions of the Software.

THE SOFTWARE IS PROVIDED “AS IS”, WITHOUT WARRANTY OF ANY KIND, EXPRESS OR
IMPLIED, INCLUDING BUT NOT LIMITED TO THE WARRANTIES OF MERCHANTABILITY, FITNESS
FOR A PARTICULAR PURPOSE AND NONINFRINGEMENT. IN NO EVENT SHALL THE AUTHORS OR
COPYRIGHT HOLDERS BE LIABLE FOR ANY CLAIM, DAMAGES OR OTHER LIABILITY, WHETHER
IN AN ACTION OF CONTRACT, TORT OR OTHERWISE, ARISING FROM, OUT OF OR IN
CONNECTION WITH THE SOFTWARE OR THE USE OR OTHER DEALINGS IN THE SOFTWARE.
</file>

<file path="package.json">
{
  "private": true,
  "type": "module",
  "scripts": {
    "auth:schema:generate": "turbo run auth:schema:generate",
    "postauth:schema:generate": "echo NOTE: you will also need to fix styles and db:push your new schema",
    "build": "turbo run build",
    "clean": "turbo run clean",
    "db:push": "turbo -F @repo/db push",
    "db:studio": "turbo -F @repo/db studio",
    "dev": "turbo watch dev --continue",
    "env:copy-example": "turbo run env:copy-example",
    "env:remove": "turbo run env:remove",
    "format": "turbo run format --continue -- --cache --cache-location .cache/.prettiercache",
    "format:fix": "pnpm format --write",
    "lint": "turbo run lint --continue -- --cache --cache-location .cache/.eslintcache",
    "lint:fix": "pnpm lint --fix",
    "postclean": "git clean -xdf .cache .turbo node_modules",
    "start": "turbo run start",
    "typecheck": "turbo run typecheck",
    "ui-add": "turbo run ui-add -F @repo/ui --"
  },
  "packageManager": "pnpm@10.12.1",
  "prettier": "@repo/prettier-config",
  "devDependencies": {
    "@repo/prettier-config": "workspace:*",
    "prettier": "catalog:",
    "turbo": "catalog:"
  },
  "engines": {
    "node": ">=22.10.0"
  }
}
</file>

<file path="packages/api/eslint.config.js">
import baseConfig from '@repo/eslint-config/base';

/** @type {import('typescript-eslint').Config} */
export default [
  {
    ignores: ['dist/**'],
  },
  ...baseConfig,
];
</file>

<file path="packages/api/package.json">
{
  "name": "@repo/api",
  "version": "0.1.0",
  "private": true,
  "type": "module",
  "exports": {
    "./client": {
      "types": "./dist/src/client/index.d.ts",
      "default": "./src/client/index.ts"
    },
    "./server": {
      "types": "./dist/src/server/index.d.ts",
      "default": "./src/server/index.ts"
    }
  },
  "scripts": {
    "build": "tsc",
    "clean": "git clean -xdf .cache .turbo dist node_modules",
    "dev": "tsc",
    "format": "prettier --check . --ignore-path ../../.gitignore",
    "lint": "eslint",
    "typecheck": "tsc --noEmit --emitDeclarationOnly false"
  },
  "prettier": "@repo/prettier-config",
  "dependencies": {
    "@repo/auth": "workspace:*",
    "@repo/db": "workspace:*",
    "@trpc/client": "catalog:",
    "@trpc/server": "catalog:",
    "superjson": "catalog:",
    "url-join": "catalog:",
    "valibot": "catalog:"
  },
  "devDependencies": {
    "@repo/eslint-config": "workspace:*",
    "@repo/prettier-config": "workspace:*",
    "@repo/typescript-config": "workspace:*",
    "eslint": "catalog:",
    "prettier": "catalog:",
    "typescript": "catalog:",
    "vite": "catalog:"
  }
}
</file>

<file path="packages/api/src/client/index.ts">
import { createTRPCClient, httpBatchLink } from '@trpc/client';
import SuperJSON from 'superjson';
import urlJoin from 'url-join';
import type { AppRouter } from '../server';

export interface APIClientOptions {
  serverUrl: string;
}

export const createTrpcClient = ({ serverUrl }: APIClientOptions) => {
  return createTRPCClient<AppRouter>({
    links: [
      httpBatchLink({
        url: urlJoin(serverUrl, 'trpc'),
        transformer: SuperJSON,
        fetch(url, options) {
          return fetch(url, {
            ...options,
            /**
             * https://trpc.io/docs/client/cors
             *
             * This is required if you are deploying your frontend (web)
             * and backend (server) on two different domains.
             */
            credentials: 'include',
          });
        },
      }),
    ],
  });
};
</file>

<file path="packages/api/src/server/index.ts">
import type { AuthInstance } from '@repo/auth/server';
import type { DatabaseInstance } from '@repo/db/client';
import postRouter from './router/post';
import { createTRPCContext as createTRPCContextInternal, router } from './trpc';

export const appRouter = router({
  posts: postRouter,
});

export const createApi = ({
  auth,
  db,
}: {
  auth: AuthInstance;
  db: DatabaseInstance;
}) => {
  return {
    trpcRouter: appRouter,
    createTRPCContext: ({ headers }: { headers: Headers }) =>
      createTRPCContextInternal({ auth, db, headers }),
  };
};

export type AppRouter = typeof appRouter;
</file>

<file path="packages/api/src/server/router/post.ts">
import { desc, eq } from '@repo/db';
import { CreatePostSchema, post, user } from '@repo/db/schema';

import { TRPCError } from '@trpc/server';
import * as v from 'valibot';
import { protectedProcedure, publicProcedure, router } from '../trpc';

const postRouter = router({
  all: protectedProcedure.query(({ ctx }) => {
    return ctx.db.query.post.findMany({
      columns: {
        id: true,
        title: true,
        category: true,
        createdAt: true,
      },
      orderBy: desc(post.createdAt),
    });
  }),

  one: publicProcedure
    .input(v.object({ id: v.pipe(v.string(), v.uuid()) }))
    .query(async ({ ctx, input }) => {
      const [dbPost] = await ctx.db
        .select({
          id: post.id,
          title: post.title,
          content: post.content,
          category: post.category,
          createdAt: post.createdAt,
          author: {
            id: user.id,
            name: user.name,
          },
        })
        .from(post)
        .innerJoin(user, eq(post.createdBy, user.id))
        .where(eq(post.id, input.id));

      if (!dbPost) {
        throw new TRPCError({
          code: 'BAD_REQUEST',
          message: `No such post with ID ${input.id}`,
        });
      }
      return dbPost;
    }),

  create: protectedProcedure
    .input(CreatePostSchema)
    .mutation(async ({ ctx, input }) => {
      await ctx.db.insert(post).values({
        createdBy: ctx.session.user.id,
        ...input,
      });
      return {};
    }),

  delete: protectedProcedure
    .input(v.object({ id: v.pipe(v.string(), v.uuid()) }))
    .mutation(async ({ ctx, input }) => {
      const res = await ctx.db.delete(post).where(eq(post.id, input.id));
      if (res.rowCount === 0) {
        throw new TRPCError({
          code: 'BAD_REQUEST',
          message: `No such post with id ${input.id}`,
        });
      }
      return {};
    }),
});

export default postRouter;
</file>

<file path="packages/api/src/server/trpc.ts">
import { initTRPC, TRPCError } from '@trpc/server';
import SuperJSON from 'superjson';
import type { AuthInstance } from '@repo/auth/server';
import type { DatabaseInstance } from '@repo/db/client';

export const createTRPCContext = async ({
  auth,
  db,
  headers,
}: {
  auth: AuthInstance;
  db: DatabaseInstance;
  headers: Headers;
}): Promise<{
  db: DatabaseInstance;
  session: AuthInstance['$Infer']['Session'] | null;
}> => {
  const session = await auth.api.getSession({
    headers,
  });
  return {
    db,
    session,
  };
};

export const t = initTRPC.context<typeof createTRPCContext>().create({
  transformer: SuperJSON,
});

export const router = t.router;

const timingMiddleware = t.middleware(async ({ next, path }) => {
  const start = Date.now();
  let waitMsDisplay = '';
  if (t._config.isDev) {
    // artificial delay in dev 100-500ms
    const waitMs = Math.floor(Math.random() * 400) + 100;
    await new Promise((resolve) => setTimeout(resolve, waitMs));
    waitMsDisplay = ` (artificial delay: ${waitMs}ms)`;
  }
  const result = await next();
  const end = Date.now();

  console.log(
    `\t[TRPC] /${path} executed after ${end - start}ms${waitMsDisplay}`,
  );
  return result;
});

export const publicProcedure = t.procedure.use(timingMiddleware);

export const protectedProcedure = publicProcedure.use(({ ctx, next }) => {
  if (!ctx.session?.user) {
    throw new TRPCError({ code: 'FORBIDDEN' });
  }
  return next({
    ctx: {
      session: { ...ctx.session },
    },
  });
});
</file>

<file path="packages/api/tsconfig.json">
{
  "extends": "@repo/typescript-config/internal-package.json",
  "include": ["src"],
  "exclude": ["node_modules"],
  "compilerOptions": {
    "types": ["vite/client"]
  }
}
</file>

<file path="packages/auth/eslint.config.js">
import baseConfig from '@repo/eslint-config/base';

/** @type {import('typescript-eslint').Config} */
export default [
  {
    ignores: [],
  },
  ...baseConfig,
];
</file>

<file path="packages/auth/package.json">
{
  "name": "@repo/auth",
  "version": "0.1.0",
  "private": true,
  "type": "module",
  "exports": {
    "./client": "./src/client.ts",
    "./server": "./src/server.ts"
  },
  "scripts": {
    "build": "tsc",
    "clean": "git clean -xdf .cache .turbo dist node_modules",
    "dev": "tsc",
    "format": "prettier --check . --ignore-path ../../.gitignore",
    "auth:schema:generate": "pnpx @better-auth/cli generate --config ./src/cli-config.ts --output ../db/src/schemas/auth.ts",
    "lint": "eslint",
    "typecheck": "tsc --noEmit"
  },
  "prettier": "@repo/prettier-config",
  "dependencies": {
    "@repo/db": "workspace:*",
    "better-auth": "catalog:"
  },
  "devDependencies": {
    "@repo/eslint-config": "workspace:*",
    "@repo/prettier-config": "workspace:*",
    "@repo/typescript-config": "workspace:*",
    "@types/node": "catalog:",
    "eslint": "catalog:",
    "typescript": "catalog:"
  }
}
</file>

<file path="packages/auth/src/cli-config.ts">
import { createDb } from '@repo/db/client';
import { betterAuth } from 'better-auth';
import { getBaseOptions } from './server';

/**
 * @internal
 *
 * This export is needed strictly for the CLI to work with
 *     pnpm auth:schema:generate
 *
 * It should not be imported or used for any other purpose.
 *
 * The documentation for better-auth CLI can be found here:
 * - https://www.better-auth.com/docs/concepts/cli
 */
export const auth = betterAuth({
  ...getBaseOptions(createDb()),
});
</file>

<file path="packages/auth/src/client.ts">
import { createAuthClient as createBetterAuthClient } from 'better-auth/react';

export interface AuthClientOptions {
  apiBaseUrl: string;
}

export const createAuthClient = ({ apiBaseUrl }: AuthClientOptions) =>
  createBetterAuthClient({
    baseURL: apiBaseUrl,

    /**
     * Only uncomment the line below if you are using plugins, so that
     * your types can be correctly inferred.
     * Ensure that you are using the client-side version of the plugin,
     * e.g. `adminClient` instead of `admin`.
     */
    // plugins: []
  });
</file>

<file path="packages/auth/src/server.ts">
import { type BetterAuthOptions, betterAuth } from 'better-auth';

import { drizzleAdapter } from 'better-auth/adapters/drizzle';
import type { DatabaseInstance } from '@repo/db/client';

export interface AuthOptions {
  webUrl: string;
  authSecret: string;
  db: DatabaseInstance;
}

export type AuthInstance = ReturnType<typeof createAuth>;

/**
 * This function is abstracted for schema generations in cli-config.ts
 */
export const getBaseOptions = (db: DatabaseInstance) =>
  ({
    database: drizzleAdapter(db, {
      provider: 'pg',
    }),

    /**
     * Only uncomment the line below if you are using plugins, so that
     * your types can be correctly inferred:
     */
    // plugins: [],
  }) satisfies BetterAuthOptions;

export const createAuth = ({ webUrl, db, authSecret }: AuthOptions) => {
  return betterAuth({
    ...getBaseOptions(db),
    secret: authSecret,
    trustedOrigins: [webUrl].map((url) => new URL(url).origin),
    session: {
      cookieCache: {
        enabled: true,
        maxAge: 5 * 60,
      },
    },
    emailAndPassword: {
      enabled: true,
      autoSignIn: true,
      requireEmailVerification: false,
    },
  });
};
</file>

<file path="packages/auth/tsconfig.json">
{
  "extends": "@repo/typescript-config/internal-package.json",
  "include": ["src"],
  "exclude": ["node_modules"],
  "compilerOptions": {
    "lib": ["dom", "ES2022"],
    "composite": false,
    "emitDeclarationOnly": false,
    "declarationMap": false,
    "declaration": false,
    "baseUrl": "."
  }
}
</file>

<file path="packages/db/.env.example">
DB_POSTGRES_URL=postgres://postgres:postgres@localhost:5432/postgres
</file>

<file path="packages/db/Dockerfile">
FROM node:22-alpine AS base

WORKDIR /app

# =========================================================================== #

FROM base AS builder-base

ENV TURBO_TELEMETRY_DISABLED=1
ENV PNPM_HOME="/pnpm"
ENV PATH="$PNPM_HOME:$PATH"
ENV CI=1

RUN corepack enable pnpm

# =========================================================================== #

FROM builder-base AS builder

RUN pnpm install --global turbo@^2

COPY . .

# https://turbo.build/repo/docs/guides/tools/docker#the-solution
RUN turbo prune @repo/db --docker \
    && pnpm install --frozen-lockfile

CMD ["/bin/sh"]
</file>

<file path="packages/db/drizzle.config.ts">
import * as v from 'valibot';
import type { Config } from 'drizzle-kit';

const envSchema = v.object({
  DB_POSTGRES_URL: v.pipe(v.string(), v.minLength(1)),
});

const env = v.parse(envSchema, process.env);

// Supabase pooling URL uses 6543, which we don't need for migrations
const nonPoolingUrl = env.DB_POSTGRES_URL.replace(':6543', ':5432');

export default {
  schema: './src/schema.ts',
  dialect: 'postgresql',
  dbCredentials: { url: nonPoolingUrl },
  casing: 'snake_case',
} satisfies Config;
</file>

<file path="packages/db/eslint.config.js">
import baseConfig, { restrictEnvAccess } from '@repo/eslint-config/base';

/** @type {import('typescript-eslint').Config} */
export default [
  {
    ignores: ['dist/**'],
  },
  ...baseConfig,
  ...restrictEnvAccess,
  {
    files: ['drizzle.config.ts'],
    rules: {
      'no-restricted-properties': 'off',
    },
  },
];
</file>

<file path="packages/db/package.json">
{
  "name": "@repo/db",
  "private": true,
  "type": "module",
  "exports": {
    ".": {
      "types": "./dist/src/index.d.ts",
      "default": "./src/index.ts"
    },
    "./client": {
      "types": "./dist/src/client.d.ts",
      "default": "./src/client.ts"
    },
    "./schema": {
      "types": "./dist/src/schema.d.ts",
      "default": "./src/schema.ts"
    }
  },
  "scripts": {
    "build": "tsc --build",
    "clean": "git clean -xdf .cache .turbo dist node_modules",
    "dev": "tsc --build tsconfig.package.json",
    "env:copy-example": "shx -- cp -n .env.example .env",
    "env:remove": "shx -- rm -f .env",
    "env:run": "dotenv --",
    "format": "prettier --check . --ignore-path ../../.gitignore",
    "lint": "eslint",
    "push": "pnpm env:run drizzle-kit push",
    "studio": "pnpm env:run drizzle-kit studio",
    "typecheck": "tsc --build --noEmit --emitDeclarationOnly false"
  },
  "prettier": "@repo/prettier-config",
  "dependencies": {
    "drizzle-orm": "catalog:",
    "drizzle-valibot": "catalog:",
    "pg": "catalog:",
    "valibot": "catalog:"
  },
  "devDependencies": {
    "@repo/eslint-config": "workspace:*",
    "@repo/prettier-config": "workspace:*",
    "@repo/typescript-config": "workspace:*",
    "@types/node": "catalog:",
    "@types/pg": "catalog:",
    "dotenv-cli": "catalog:",
    "drizzle-kit": "catalog:",
    "eslint": "catalog:",
    "shx": "catalog:",
    "typescript": "catalog:"
  }
}
</file>

<file path="packages/db/src/client.ts">
import { drizzle, NodePgDatabase } from 'drizzle-orm/node-postgres';

import * as schema from './schema';

export interface DatabaseClientOptions {
  databaseUrl?: string;
  max?: number;
}

export type DatabaseInstance = NodePgDatabase<typeof schema>;

export const createDb = (opts?: DatabaseClientOptions): DatabaseInstance => {
  return drizzle({
    schema,
    casing: 'snake_case',
    connection: {
      connectionString: opts?.databaseUrl,
      max: opts?.max,
    },
  });
};
</file>

<file path="packages/db/src/index.ts">
export * from 'drizzle-orm/sql';
export { alias } from 'drizzle-orm/pg-core';
</file>

<file path="packages/db/src/schema.ts">
export * from './schemas/auth';
export * from './schemas/posts';
</file>

<file path="packages/db/src/schemas/auth.ts">
import { pgTable, text, timestamp, boolean } from 'drizzle-orm/pg-core';

export const user = pgTable('user', {
  id: text('id').primaryKey(),
  name: text('name').notNull(),
  email: text('email').notNull().unique(),
  emailVerified: boolean('email_verified').notNull(),
  image: text('image'),
  createdAt: timestamp('created_at').notNull(),
  updatedAt: timestamp('updated_at').notNull(),
});

export const session = pgTable('session', {
  id: text('id').primaryKey(),
  expiresAt: timestamp('expires_at').notNull(),
  token: text('token').notNull().unique(),
  createdAt: timestamp('created_at').notNull(),
  updatedAt: timestamp('updated_at').notNull(),
  ipAddress: text('ip_address'),
  userAgent: text('user_agent'),
  userId: text('user_id')
    .notNull()
    .references(() => user.id, { onDelete: 'cascade' }),
});

export const account = pgTable('account', {
  id: text('id').primaryKey(),
  accountId: text('account_id').notNull(),
  providerId: text('provider_id').notNull(),
  userId: text('user_id')
    .notNull()
    .references(() => user.id, { onDelete: 'cascade' }),
  accessToken: text('access_token'),
  refreshToken: text('refresh_token'),
  idToken: text('id_token'),
  accessTokenExpiresAt: timestamp('access_token_expires_at'),
  refreshTokenExpiresAt: timestamp('refresh_token_expires_at'),
  scope: text('scope'),
  password: text('password'),
  createdAt: timestamp('created_at').notNull(),
  updatedAt: timestamp('updated_at').notNull(),
});

export const verification = pgTable('verification', {
  id: text('id').primaryKey(),
  identifier: text('identifier').notNull(),
  value: text('value').notNull(),
  expiresAt: timestamp('expires_at').notNull(),
  createdAt: timestamp('created_at'),
  updatedAt: timestamp('updated_at'),
});
</file>

<file path="packages/db/src/schemas/posts.ts">
import { pgTable } from 'drizzle-orm/pg-core';
import { createInsertSchema } from 'drizzle-valibot';
import * as v from 'valibot';
import { user } from './auth';

export const post = pgTable('post', (t) => ({
  id: t.uuid().primaryKey().defaultRandom(),
  title: t.varchar({ length: 256 }).notNull(),
  content: t.text().notNull(),
  category: t.varchar({ length: 50 }).notNull(),
  createdAt: t.timestamp().notNull().defaultNow(),
  createdBy: t
    .text()
    .references(() => user.id)
    .notNull(),
}));

export const CreatePostSchema = v.omit(
  createInsertSchema(post, {
    title: v.pipe(v.string(), v.maxLength(256)),
    content: v.pipe(v.string(), v.maxLength(512)),
    category: v.pipe(v.string(), v.maxLength(50)),
  }),
  ['id', 'createdAt', 'createdBy'],
);
</file>

<file path="packages/db/tsconfig.drizzlekit.json">
{
  "extends": "@repo/typescript-config/base.json",
  "include": ["drizzle.config.ts"],
  "exclude": ["node_modules"]
}
</file>

<file path="packages/db/tsconfig.json">
{
  "files": [],
  "references": [
    { "path": "./tsconfig.package.json" },
    { "path": "./tsconfig.drizzlekit.json" }
  ]
}
</file>

<file path="packages/db/tsconfig.package.json">
{
  "extends": "@repo/typescript-config/internal-package.json",
  "include": ["src"],
  "exclude": ["node_modules"]
}
</file>

<file path="packages/db/turbo.json">
{
  "$schema": "https://turborepo.org/schema.json",
  "extends": ["//"],
  "tasks": {
    "dev": {
      "env": ["DB_*"],
      "inputs": ["$TURBO_DEFAULT$", ".env"]
    },
    "build": {
      "env": ["DB_*"],
      "inputs": ["$TURBO_DEFAULT$", ".env"]
    }
  }
}
</file>

<file path="packages/ui/components.json">
{
  "$schema": "https://ui.shadcn.com/schema.json",
  "style": "new-york",
  "rsc": false,
  "tsx": true,
  "tailwind": {
    "config": "",
    "css": "../../tools/tailwind/style.css",
    "baseColor": "zinc",
    "cssVariables": true
  },
  "aliases": {
    "ui": "src/components",
    "utils": "#/lib/utils",
    "components": "#/components"
  }
}
</file>

<file path="packages/ui/eslint.config.js">
import baseConfig from '@repo/eslint-config/base';
import reactConfig from '@repo/eslint-config/react';

/** @type {import('typescript-eslint').Config} */
export default [
  {
    ignores: ['dist/**'],
  },
  ...baseConfig,
  ...reactConfig,
];
</file>

<file path="packages/ui/package.json">
{
  "name": "@repo/ui",
  "private": true,
  "version": "0.1.0",
  "type": "module",
  "files": [
    "dist"
  ],
  "imports": {
    "#*": "./src/*"
  },
  "exports": {
    "./lib/*": {
      "types": "./dist/src/lib/*.d.ts",
      "default": "./src/lib/*.ts"
    },
    "./components/*": {
      "types": "./dist/src/components/*.d.ts",
      "default": "./src/components/*.tsx"
    }
  },
  "scripts": {
    "build": "tsc",
    "clean": "git clean -xdf .cache .turbo dist node_modules",
    "dev": "tsc",
    "format": "prettier --check . --ignore-path ../../.gitignore",
    "lint": "eslint",
    "postui-add": "prettier src --write --list-different",
    "typecheck": "tsc --noEmit --emitDeclarationOnly false",
    "ui-add": "pnpm dlx shadcn@canary add"
  },
  "dependencies": {
    "@radix-ui/react-avatar": "catalog:",
    "@radix-ui/react-dialog": "catalog:",
    "@radix-ui/react-dropdown-menu": "catalog:",
    "@radix-ui/react-icons": "catalog:",
    "@radix-ui/react-label": "catalog:",
    "@radix-ui/react-slot": "catalog:",
    "@radix-ui/react-toast": "catalog:",
    "@radix-ui/react-tooltip": "catalog:",
    "class-variance-authority": "catalog:",
    "next-themes": "catalog:",
    "radix-ui": "catalog:",
    "sonner": "catalog:",
    "tailwind-merge": "catalog:"
  },
  "devDependencies": {
    "@repo/eslint-config": "workspace:*",
    "@repo/prettier-config": "workspace:*",
    "@repo/tailwind-config": "workspace:*",
    "@repo/typescript-config": "workspace:*",
    "@types/react": "catalog:",
    "eslint": "catalog:",
    "prettier": "catalog:",
    "react": "catalog:",
    "typescript": "catalog:"
  },
  "peerDependencies": {
    "react": "catalog:"
  },
  "prettier": "@repo/prettier-config"
}
</file>

<file path="packages/ui/src/components/avatar.tsx">
import * as AvatarPrimitive from '@radix-ui/react-avatar';
import * as React from 'react';

import { cn } from '#/lib/utils';

const Avatar = React.forwardRef<
  React.ComponentRef<typeof AvatarPrimitive.Root>,
  React.ComponentPropsWithoutRef<typeof AvatarPrimitive.Root>
>(({ className, ...props }, ref) => (
  <AvatarPrimitive.Root
    ref={ref}
    className={cn(
      'relative flex h-10 w-10 shrink-0 overflow-hidden rounded-full',
      className,
    )}
    {...props}
  />
));
Avatar.displayName = AvatarPrimitive.Root.displayName;

const AvatarImage = React.forwardRef<
  React.ComponentRef<typeof AvatarPrimitive.Image>,
  React.ComponentPropsWithoutRef<typeof AvatarPrimitive.Image>
>(({ className, ...props }, ref) => (
  <AvatarPrimitive.Image
    ref={ref}
    className={cn('aspect-square h-full w-full', className)}
    {...props}
  />
));
AvatarImage.displayName = AvatarPrimitive.Image.displayName;

const AvatarFallback = React.forwardRef<
  React.ComponentRef<typeof AvatarPrimitive.Fallback>,
  React.ComponentPropsWithoutRef<typeof AvatarPrimitive.Fallback>
>(({ className, ...props }, ref) => (
  <AvatarPrimitive.Fallback
    ref={ref}
    className={cn(
      'flex h-full w-full items-center justify-center rounded-full bg-muted',
      className,
    )}
    {...props}
  />
));
AvatarFallback.displayName = AvatarPrimitive.Fallback.displayName;

export { Avatar, AvatarImage, AvatarFallback };
</file>

<file path="packages/ui/src/components/button.tsx">
import { Slot } from '@radix-ui/react-slot';
import { cva, type VariantProps } from 'class-variance-authority';
import * as React from 'react';

import { cn } from '#/lib/utils';

const buttonVariants = cva(
  'inline-flex items-center justify-center gap-2 whitespace-nowrap rounded-md text-sm font-medium ring-offset-background transition-colors focus-visible:outline-none focus-visible:ring-2 focus-visible:ring-ring focus-visible:ring-offset-2 disabled:pointer-events-none disabled:opacity-50 [&_svg]:pointer-events-none [&_svg]:size-4 [&_svg]:shrink-0',
  {
    variants: {
      variant: {
        default: 'bg-primary text-primary-foreground hover:bg-primary/70',
        destructive:
          'bg-destructive text-destructive-foreground hover:bg-destructive/70',
        outline:
          'border border-input bg-background hover:bg-accent hover:text-accent-foreground',
        secondary:
          'bg-secondary text-secondary-foreground hover:bg-secondary/70',
        ghost: 'hover:bg-accent hover:text-accent-foreground',
        link: 'text-primary underline-offset-4 hover:underline',
      },
      size: {
        default: 'h-10 px-4 py-2',
        sm: 'h-9 rounded-md px-3',
        lg: 'h-11 rounded-md px-8',
        icon: 'h-10 w-10',
      },
    },
    defaultVariants: {
      variant: 'default',
      size: 'default',
    },
  },
);

export interface ButtonProps
  extends React.ButtonHTMLAttributes<HTMLButtonElement>,
    VariantProps<typeof buttonVariants> {
  asChild?: boolean;
}

const Button = React.forwardRef<HTMLButtonElement, ButtonProps>(
  ({ className, variant, size, asChild = false, ...props }, ref) => {
    const Comp = asChild ? Slot : 'button';
    return (
      <Comp
        className={cn(buttonVariants({ variant, size, className }))}
        ref={ref}
        {...props}
      />
    );
  },
);
Button.displayName = 'Button';

export { Button, buttonVariants };
</file>

<file path="packages/ui/src/components/dialog.tsx">
import * as DialogPrimitive from '@radix-ui/react-dialog';
import { Cross2Icon } from '@radix-ui/react-icons';
import * as React from 'react';
import { cn } from '#/lib/utils';

const Dialog = DialogPrimitive.Root;

const DialogTrigger = DialogPrimitive.Trigger;

const DialogPortal = DialogPrimitive.Portal;

const DialogClose = DialogPrimitive.Close;

const DialogOverlay = React.forwardRef<
  React.ComponentRef<typeof DialogPrimitive.Overlay>,
  React.ComponentPropsWithoutRef<typeof DialogPrimitive.Overlay>
>(({ className, ...props }, ref) => (
  <DialogPrimitive.Overlay
    ref={ref}
    className={cn(
      'fixed inset-0 z-50 bg-black/80  data-[state=open]:animate-in data-[state=closed]:animate-out data-[state=closed]:fade-out-0 data-[state=open]:fade-in-0',
      className,
    )}
    {...props}
  />
));
DialogOverlay.displayName = DialogPrimitive.Overlay.displayName;

const DialogContent = React.forwardRef<
  React.ComponentRef<typeof DialogPrimitive.Content>,
  React.ComponentPropsWithoutRef<typeof DialogPrimitive.Content>
>(({ className, children, ...props }, ref) => (
  <DialogPortal>
    <DialogOverlay />
    <DialogPrimitive.Content
      ref={ref}
      className={cn(
        'fixed left-[50%] top-[50%] z-50 grid w-full max-w-lg translate-x-[-50%] translate-y-[-50%] gap-4 border bg-background p-6 shadow-lg duration-200 data-[state=open]:animate-in data-[state=closed]:animate-out data-[state=closed]:fade-out-0 data-[state=open]:fade-in-0 data-[state=closed]:zoom-out-95 data-[state=open]:zoom-in-95 data-[state=closed]:slide-out-to-left-1/2 data-[state=closed]:slide-out-to-top-[48%] data-[state=open]:slide-in-from-left-1/2 data-[state=open]:slide-in-from-top-[48%] sm:rounded-lg',
        className,
      )}
      {...props}
    >
      {children}
      <DialogPrimitive.Close className="absolute right-4 top-4 rounded-sm opacity-70 ring-offset-background transition-opacity hover:opacity-100 focus:outline-none focus:ring-2 focus:ring-ring focus:ring-offset-2 disabled:pointer-events-none data-[state=open]:bg-accent data-[state=open]:text-muted-foreground">
        <Cross2Icon className="h-4 w-4" />
        <span className="sr-only">Close</span>
      </DialogPrimitive.Close>
    </DialogPrimitive.Content>
  </DialogPortal>
));
DialogContent.displayName = DialogPrimitive.Content.displayName;

const DialogHeader = ({
  className,
  ...props
}: React.HTMLAttributes<HTMLDivElement>) => (
  <div
    className={cn(
      'flex flex-col space-y-1.5 text-center sm:text-left',
      className,
    )}
    {...props}
  />
);
DialogHeader.displayName = 'DialogHeader';

const DialogFooter = ({
  className,
  ...props
}: React.HTMLAttributes<HTMLDivElement>) => (
  <div
    className={cn('flex flex-row justify-end sm:space-x-2', className)}
    {...props}
  />
);
DialogFooter.displayName = 'DialogFooter';

const DialogTitle = React.forwardRef<
  React.ComponentRef<typeof DialogPrimitive.Title>,
  React.ComponentPropsWithoutRef<typeof DialogPrimitive.Title>
>(({ className, ...props }, ref) => (
  <DialogPrimitive.Title
    ref={ref}
    className={cn(
      'text-lg font-semibold leading-none tracking-tight',
      className,
    )}
    {...props}
  />
));
DialogTitle.displayName = DialogPrimitive.Title.displayName;

const DialogDescription = React.forwardRef<
  React.ComponentRef<typeof DialogPrimitive.Description>,
  React.ComponentPropsWithoutRef<typeof DialogPrimitive.Description>
>(({ className, ...props }, ref) => (
  <DialogPrimitive.Description
    ref={ref}
    className={cn('text-sm text-muted-foreground', className)}
    {...props}
  />
));
DialogDescription.displayName = DialogPrimitive.Description.displayName;

export {
  Dialog,
  DialogPortal,
  DialogOverlay,
  DialogClose,
  DialogTrigger,
  DialogContent,
  DialogHeader,
  DialogFooter,
  DialogTitle,
  DialogDescription,
};
</file>

<file path="packages/ui/src/components/dropdown-menu.tsx">
import * as DropdownMenuPrimitive from '@radix-ui/react-dropdown-menu';
import {
  CheckIcon,
  ChevronRightIcon,
  DotFilledIcon,
} from '@radix-ui/react-icons';
import * as React from 'react';
import { cn } from '#/lib/utils';

const DropdownMenu = DropdownMenuPrimitive.Root;

const DropdownMenuTrigger = DropdownMenuPrimitive.Trigger;

const DropdownMenuGroup = DropdownMenuPrimitive.Group;

const DropdownMenuPortal = DropdownMenuPrimitive.Portal;

const DropdownMenuSub = DropdownMenuPrimitive.Sub;

const DropdownMenuRadioGroup = DropdownMenuPrimitive.RadioGroup;

const DropdownMenuSubTrigger = React.forwardRef<
  React.ElementRef<typeof DropdownMenuPrimitive.SubTrigger>,
  React.ComponentPropsWithoutRef<typeof DropdownMenuPrimitive.SubTrigger> & {
    inset?: boolean;
  }
>(({ className, inset, children, ...props }, ref) => (
  <DropdownMenuPrimitive.SubTrigger
    ref={ref}
    className={cn(
      'flex cursor-default gap-2 select-none items-center rounded-sm px-2 py-1.5 text-sm outline-none focus:bg-accent data-[state=open]:bg-accent [&_svg]:pointer-events-none [&_svg]:size-4 [&_svg]:shrink-0',
      inset && 'pl-8',
      className,
    )}
    {...props}
  >
    {children}
    <ChevronRightIcon className="ml-auto" />
  </DropdownMenuPrimitive.SubTrigger>
));
DropdownMenuSubTrigger.displayName =
  DropdownMenuPrimitive.SubTrigger.displayName;

const DropdownMenuSubContent = React.forwardRef<
  React.ElementRef<typeof DropdownMenuPrimitive.SubContent>,
  React.ComponentPropsWithoutRef<typeof DropdownMenuPrimitive.SubContent>
>(({ className, ...props }, ref) => (
  <DropdownMenuPrimitive.SubContent
    ref={ref}
    className={cn(
      'z-50 min-w-[8rem] overflow-hidden rounded-md border bg-popover p-1 text-popover-foreground shadow-lg data-[state=open]:animate-in data-[state=closed]:animate-out data-[state=closed]:fade-out-0 data-[state=open]:fade-in-0 data-[state=closed]:zoom-out-95 data-[state=open]:zoom-in-95 data-[side=bottom]:slide-in-from-top-2 data-[side=left]:slide-in-from-right-2 data-[side=right]:slide-in-from-left-2 data-[side=top]:slide-in-from-bottom-2',
      className,
    )}
    {...props}
  />
));
DropdownMenuSubContent.displayName =
  DropdownMenuPrimitive.SubContent.displayName;

const DropdownMenuContent = React.forwardRef<
  React.ElementRef<typeof DropdownMenuPrimitive.Content>,
  React.ComponentPropsWithoutRef<typeof DropdownMenuPrimitive.Content>
>(({ className, sideOffset = 4, ...props }, ref) => (
  <DropdownMenuPrimitive.Portal>
    <DropdownMenuPrimitive.Content
      ref={ref}
      sideOffset={sideOffset}
      className={cn(
        'z-50 min-w-[8rem] overflow-hidden rounded-md border bg-popover p-1 text-popover-foreground shadow-md data-[state=open]:animate-in data-[state=closed]:animate-out data-[state=closed]:fade-out-0 data-[state=open]:fade-in-0 data-[state=closed]:zoom-out-95 data-[state=open]:zoom-in-95 data-[side=bottom]:slide-in-from-top-2 data-[side=left]:slide-in-from-right-2 data-[side=right]:slide-in-from-left-2 data-[side=top]:slide-in-from-bottom-2',
        className,
      )}
      {...props}
    />
  </DropdownMenuPrimitive.Portal>
));
DropdownMenuContent.displayName = DropdownMenuPrimitive.Content.displayName;

const DropdownMenuItem = React.forwardRef<
  React.ElementRef<typeof DropdownMenuPrimitive.Item>,
  React.ComponentPropsWithoutRef<typeof DropdownMenuPrimitive.Item> & {
    inset?: boolean;
  }
>(({ className, inset, ...props }, ref) => (
  <DropdownMenuPrimitive.Item
    ref={ref}
    className={cn(
      'relative flex cursor-default select-none items-center gap-2 rounded-sm px-2 py-1.5 text-sm outline-none transition-colors focus:bg-accent focus:text-accent-foreground data-[disabled]:pointer-events-none data-[disabled]:opacity-50 [&_svg]:pointer-events-none [&_svg]:size-4 [&_svg]:shrink-0',
      inset && 'pl-8',
      className,
    )}
    {...props}
  />
));
DropdownMenuItem.displayName = DropdownMenuPrimitive.Item.displayName;

const DropdownMenuCheckboxItem = React.forwardRef<
  React.ElementRef<typeof DropdownMenuPrimitive.CheckboxItem>,
  React.ComponentPropsWithoutRef<typeof DropdownMenuPrimitive.CheckboxItem>
>(({ className, children, checked, ...props }, ref) => (
  <DropdownMenuPrimitive.CheckboxItem
    ref={ref}
    className={cn(
      'relative flex cursor-default select-none items-center rounded-sm py-1.5 pl-8 pr-2 text-sm outline-none transition-colors focus:bg-accent focus:text-accent-foreground data-[disabled]:pointer-events-none data-[disabled]:opacity-50',
      className,
    )}
    checked={checked}
    {...props}
  >
    <span className="absolute left-2 flex h-3.5 w-3.5 items-center justify-center">
      <DropdownMenuPrimitive.ItemIndicator>
        <CheckIcon className="h-4 w-4" />
      </DropdownMenuPrimitive.ItemIndicator>
    </span>
    {children}
  </DropdownMenuPrimitive.CheckboxItem>
));
DropdownMenuCheckboxItem.displayName =
  DropdownMenuPrimitive.CheckboxItem.displayName;

const DropdownMenuRadioItem = React.forwardRef<
  React.ElementRef<typeof DropdownMenuPrimitive.RadioItem>,
  React.ComponentPropsWithoutRef<typeof DropdownMenuPrimitive.RadioItem>
>(({ className, children, ...props }, ref) => (
  <DropdownMenuPrimitive.RadioItem
    ref={ref}
    className={cn(
      'relative flex cursor-default select-none items-center rounded-sm py-1.5 pl-8 pr-2 text-sm outline-none transition-colors focus:bg-accent focus:text-accent-foreground data-[disabled]:pointer-events-none data-[disabled]:opacity-50',
      className,
    )}
    {...props}
  >
    <span className="absolute left-2 flex h-3.5 w-3.5 items-center justify-center">
      <DropdownMenuPrimitive.ItemIndicator>
        <DotFilledIcon className="h-2 w-2 fill-current" />
      </DropdownMenuPrimitive.ItemIndicator>
    </span>
    {children}
  </DropdownMenuPrimitive.RadioItem>
));
DropdownMenuRadioItem.displayName = DropdownMenuPrimitive.RadioItem.displayName;

const DropdownMenuLabel = React.forwardRef<
  React.ElementRef<typeof DropdownMenuPrimitive.Label>,
  React.ComponentPropsWithoutRef<typeof DropdownMenuPrimitive.Label> & {
    inset?: boolean;
  }
>(({ className, inset, ...props }, ref) => (
  <DropdownMenuPrimitive.Label
    ref={ref}
    className={cn(
      'px-2 py-1.5 text-sm font-semibold',
      inset && 'pl-8',
      className,
    )}
    {...props}
  />
));
DropdownMenuLabel.displayName = DropdownMenuPrimitive.Label.displayName;

const DropdownMenuSeparator = React.forwardRef<
  React.ElementRef<typeof DropdownMenuPrimitive.Separator>,
  React.ComponentPropsWithoutRef<typeof DropdownMenuPrimitive.Separator>
>(({ className, ...props }, ref) => (
  <DropdownMenuPrimitive.Separator
    ref={ref}
    className={cn('-mx-1 my-1 h-px bg-muted', className)}
    {...props}
  />
));
DropdownMenuSeparator.displayName = DropdownMenuPrimitive.Separator.displayName;

const DropdownMenuShortcut = ({
  className,
  ...props
}: React.HTMLAttributes<HTMLSpanElement>) => {
  return (
    <span
      className={cn('ml-auto text-xs tracking-widest opacity-60', className)}
      {...props}
    />
  );
};
DropdownMenuShortcut.displayName = 'DropdownMenuShortcut';

export {
  DropdownMenu,
  DropdownMenuTrigger,
  DropdownMenuContent,
  DropdownMenuItem,
  DropdownMenuCheckboxItem,
  DropdownMenuRadioItem,
  DropdownMenuLabel,
  DropdownMenuSeparator,
  DropdownMenuShortcut,
  DropdownMenuGroup,
  DropdownMenuPortal,
  DropdownMenuSub,
  DropdownMenuSubContent,
  DropdownMenuSubTrigger,
  DropdownMenuRadioGroup,
};
</file>

<file path="packages/ui/src/components/input.tsx">
import * as React from 'react';

import { cn } from '#/lib/utils';

const Input = React.forwardRef<HTMLInputElement, React.ComponentProps<'input'>>(
  ({ className, type, ...props }, ref) => {
    return (
      <input
        type={type}
        className={cn(
          'flex h-10 w-full rounded-md border border-input bg-background px-3 py-2 text-base ring-offset-background file:border-0 file:bg-transparent file:text-sm file:font-medium file:text-foreground placeholder:text-muted-foreground focus-visible:outline-none focus-visible:ring-2 focus-visible:ring-ring disabled:cursor-not-allowed disabled:opacity-50 md:text-sm',
          className,
        )}
        ref={ref}
        {...props}
      />
    );
  },
);
Input.displayName = 'Input';

export { Input };
</file>

<file path="packages/ui/src/components/label.tsx">
import * as LabelPrimitive from '@radix-ui/react-label';
import { cva, type VariantProps } from 'class-variance-authority';
import * as React from 'react';

import { cn } from '#/lib/utils';

const labelVariants = cva(
  'text-sm font-medium leading-none peer-disabled:cursor-not-allowed peer-disabled:opacity-70',
);

const Label = React.forwardRef<
  React.ComponentRef<typeof LabelPrimitive.Root>,
  React.ComponentPropsWithoutRef<typeof LabelPrimitive.Root> &
    VariantProps<typeof labelVariants>
>(({ className, ...props }, ref) => (
  <LabelPrimitive.Root
    ref={ref}
    className={cn(labelVariants(), className)}
    {...props}
  />
));
Label.displayName = LabelPrimitive.Root.displayName;

export { Label };
</file>

<file path="packages/ui/src/components/sonner.tsx">
import { useTheme } from 'next-themes';
import { Toaster as Sonner } from 'sonner';

type ToasterProps = React.ComponentProps<typeof Sonner>;

const Toaster = ({ ...props }: ToasterProps) => {
  const { theme = 'light' } = useTheme();

  return (
    <Sonner
      theme={theme as ToasterProps['theme']}
      toastOptions={{
        classNames: {
          /**
           * !important necessary to override sonner styles in Tailwind V4
           * https://github.com/emilkowalski/sonner/issues/591#issue-2876586315
           */
          error: '!border-none !bg-toast-error !text-foreground',
          info: '!border-none !bg-toast-info !text-foreground',
          loading: '!border-none !bg-toast-loading !text-foreground',
          success: '!border-none !bg-toast-success !text-foreground',
          warning: '!border-none !bg-toast-warning !text-foreground',
        },
      }}
      {...props}
    />
  );
};

export { Toaster };
</file>

<file path="packages/ui/src/components/textarea.tsx">
import * as React from 'react';

import { cn } from '#/lib/utils';

const Textarea = React.forwardRef<
  HTMLTextAreaElement,
  React.ComponentProps<'textarea'>
>(({ className, ...props }, ref) => {
  return (
    <textarea
      className={cn(
        'flex min-h-[80px] w-full rounded-md border border-input bg-background px-3 py-2 text-base ring-offset-background placeholder:text-muted-foreground focus-visible:outline-none focus-visible:ring-2 focus-visible:ring-ring focus-visible:ring-offset-2 disabled:cursor-not-allowed disabled:opacity-50 md:text-sm',
        className,
      )}
      ref={ref}
      {...props}
    />
  );
});
Textarea.displayName = 'Textarea';

export { Textarea };
</file>

<file path="packages/ui/src/components/tooltip.tsx">
import * as TooltipPrimitive from '@radix-ui/react-tooltip';
import * as React from 'react';

import { cn } from '#/lib/utils';

const TooltipProvider = TooltipPrimitive.Provider;

const Tooltip = TooltipPrimitive.Root;

const TooltipTrigger = TooltipPrimitive.Trigger;

const TooltipArrow = TooltipPrimitive.Arrow;

const TooltipContent = React.forwardRef<
  React.ComponentRef<typeof TooltipPrimitive.Content>,
  React.ComponentPropsWithoutRef<typeof TooltipPrimitive.Content>
>(({ className, sideOffset = 4, ...props }, ref) => (
  <TooltipPrimitive.Portal>
    <TooltipPrimitive.Content
      ref={ref}
      sideOffset={sideOffset}
      className={cn(
        'z-50 overflow-hidden rounded-md bg-primary px-3 py-1.5 text-xs text-primary-foreground animate-in fade-in-0 zoom-in-95 data-[state=closed]:animate-out data-[state=closed]:fade-out-0 data-[state=closed]:zoom-out-95 data-[side=bottom]:slide-in-from-top-2 data-[side=left]:slide-in-from-right-2 data-[side=right]:slide-in-from-left-2 data-[side=top]:slide-in-from-bottom-2',
        className,
      )}
      {...props}
    />
  </TooltipPrimitive.Portal>
));
TooltipContent.displayName = TooltipPrimitive.Content.displayName;

export {
  Tooltip,
  TooltipArrow,
  TooltipTrigger,
  TooltipContent,
  TooltipProvider,
};
</file>

<file path="packages/ui/src/lib/utils.ts">
import { cx } from 'class-variance-authority';
import { twMerge } from 'tailwind-merge';

const cn = (...inputs: Parameters<typeof cx>) => twMerge(cx(inputs));

export { cn };
</file>

<file path="packages/ui/tsconfig.json">
{
  "extends": "@repo/typescript-config/internal-package.json",
  "compilerOptions": {
    "lib": ["ES2022", "dom", "dom.iterable"],
    "jsx": "preserve",
    "paths": {
      "#/*": ["./src/*"]
    }
  },
  "include": ["src"],
  "exclude": ["node_modules"]
}
</file>

<file path="pnpm-workspace.yaml">
packages:
  - apps/*
  - packages/*
  - tools/*

catalog:
  '@eslint/js': ^9.28.0
  '@hono/node-server': ^1.14.4
  '@hono/trpc-server': ^0.3.4
  '@radix-ui/react-avatar': ^1.1.10
  '@radix-ui/react-dialog': ^1.1.14
  '@radix-ui/react-dropdown-menu': ^2.1.15
  '@radix-ui/react-icons': ^1.3.2
  '@radix-ui/react-label': ^2.1.7
  '@radix-ui/react-slot': ^1.2.3
  '@radix-ui/react-toast': ^1.2.14
  '@radix-ui/react-tooltip': ^1.2.7
  '@tailwindcss/vite': ^4.1.8
  '@tanstack/react-form': ^1.12.2
  '@tanstack/react-query': ^5.80.6
  '@tanstack/react-router': ^1.120.20
  '@tanstack/router-devtools': ^1.120.20
  '@tanstack/router-plugin': ^1.120.20
  '@trpc/client': ^11.3.1
  '@trpc/server': ^11.3.1
  '@trpc/tanstack-react-query': ^11.3.1
  '@types/eslint-config-prettier': ^6.11.3
  '@types/node': ^22.15.30
  '@types/pg': ^8.15.4
  '@types/react': ^19.1.6
  '@types/react-dom': ^19.1.6
  '@vitejs/plugin-react-swc': ^3.10.1
  better-auth: ^1.2.8
  class-variance-authority: ^0.7.1
  dotenv-cli: ^8.0.0
  drizzle-kit: ^0.31.1
  drizzle-orm: ^0.44.2
  drizzle-valibot: ^0.4.2
  eslint: ^9.28.0
  eslint-config-prettier: ^10.1.5
  eslint-config-turbo: ^2.5.4
  eslint-plugin-import: ^2.31.0
  eslint-plugin-only-warn: ^1.1.0
  eslint-plugin-react: ^7.37.5
  eslint-plugin-react-hooks: ^5.2.0
  eslint-plugin-turbo: ^2.5.4
  globals: ^16.2.0
  hono: ^4.7.11
  next-themes: ^0.4.6
  pg: ^8.16.0
  prettier: ^3.5.3
  radix-ui: ^1.4.2
  react: ^19.1.0
  react-dom: ^19.1.0
  shx: ^0.4.0
  sonner: ^2.0.5
  superjson: ^2.2.2
  tailwind-merge: ^3.3.0
  tailwindcss: ^4.1.8
  tailwindcss-animate: ^1.0.7
  tsup: ^8.5.0
  tsx: ^4.19.4
  turbo: ^2.5.4
  typescript: ^5.8.3
  typescript-eslint: ^8.33.1
  url-join: ^5.0.0
  valibot: ^1.1.0
  vite: ^6.3.5

ignoredBuiltDependencies:
  - '@swc/core'
  - '@tailwindcss/oxide'
  - esbuild

overrides:
  brace-expansion@<=2.0.1: 2.0.2
  esbuild@<=0.24.2: '>=0.25.0'
</file>

<file path="README.md">
<table>
  <tr>
    <td>
      <a href="https://rtstack.nktnet.uk" target="_blank">
        <img align="absmiddle" width="40" src="./apps/web/public/favicon.png">
      </a>
    </td>
    <td>
      <h1>
        <a href="https://rtstack.nktnet.uk" target="_blank">RT Stack</a>
      </h1>
    </td>
  </tr>
</table>

A modern & lightweight [turborepo](https://turbo.build/repo/docs) template for
fullstack projects with modular components, shared configs, containerised
deployments and 100% type-safety.

- [About](#about)
  - [Stack overview](#stack-overview)
  - [Base Functionalities](#base-functionalities)
  - [Inspirations & Goals](#inspirations--goals)
- [Quick Start](#quick-start)
  - [Prerequisites](#prerequisites)
  - [Setup](#setup)
  - [Using an External Database](#using-an-external-database)
- [Developing](#developing)
  - [Working with a single package](#working-with-a-single-package)
  - [Adding new shadcn components](#adding-new-shadcn-components)
  - [Adding new better-auth plugins](#adding-new-better-auth-plugins)
  - [Tooling Scripts](#tooling-scripts)
- [Containerisation (Docker/Podman)](#containerisation-dockerpodman)
- [Deployment](#deployment)
  - [Using Containers](#using-containers)
  - [Using Major Platforms](#using-major-platforms)
- [Other Notes](#other-notes)
  - [Tanstack Router](#tanstack-router)
  - [Server API Artificial Delays](#server-api-artificial-delays)
  - [Environment Variables](#environment-variables)
  - [Extensions to existing template](#extensions-to-existing-template)

## About

### Stack overview

Below is an overview of all the components in the stack:

```
apps
  ├─ web
  |   ├─ react (vite)
  |   ├─ tanstack (router, query, form)
  |   └─ tailwindcss
  ├─ server
  |   └─ hono (wrapper for api & auth)
packages
  ├─ api
  |   └─ trpc with valibot
  ├─ auth
  |   └─ better-auth
  ├─ db
  |   └─ drizzle-orm (postgres database)
  ├─ ui
  |   ├─ tailwindcss
  |   └─ shadcn & radix ui
tools
  ├─ eslint
  ├─ prettier
  ├─ tailwind
  └─ typescript
```

View all catalog dependencies in [pnpm-workspace.yaml](pnpm-workspace.yaml).

### Base Functionalities

The following features are implemented out-of-the-box:

- login/register (using [better-auth email/password](https://www.better-auth.com/docs/authentication/email-password)) credentials provider
- themes (dark/light mode using [next-themes](github.com/pacocoursey/next-themes))
- web/server integration ([trpc](https://trpc.io/docs/quickstart) API example for creating/listing posts)

You can visit the [live demo](https://rtstack.nktnet.uk) to see these features in action.

### Inspirations & Goals

Many aspects of the RT Stack were derived from the
[t3-oss/create-t3-turbo](https://github.com/t3-oss/create-t3-turbo). However,
there is a preference for:

- [tanstack router](https://tanstack.com/router/latest) (web) + [hono](https://hono.dev) (server) instead of [nextjs](https://nextjs.org) (fullstack)
- [better auth](https://www.better-auth.com) for authentication instead [auth.js (next auth)](https://authjs.dev)
- [valibot](https://valibot.dev) for input validation instead of [zod](https://zod.dev)
- [tanstack form](https://tanstack.com/form/latest) instead of [react-hook-form](https://react-hook-form.com)
- using `.env` in each application/package instead of globally, as per [turborepo's recommendations](https://turbo.build/repo/docs/crafting-your-repository/using-environment-variables#best-practices)

This project also aims to consistently adopt the latest releases of dependencies and tools. For example:

- react v19
- tailwindcss v4 & shadcn-ui (canary)
- trpc v11
- eslint v9
- pnpm v10

## Quick Start

### Prerequisites

Ensure the following tools are available on your system:

1. [node](https://nodejs.org/en/download) (version 22+)
1. [pnpm](https://pnpm.io/installation) (version 10+)
1. [postgres](https://www.postgresql.org) database, which you can easily run using tools like:
   - [docker](https://docs.docker.com/engine/install) and [docker-compose](https://docs.docker.com/compose)
   - [podman](https://podman.io/docs/installation) and [podman-compose](https://github.com/containers/podman-compose)
   - [supabase](https://supabase.com)'s free tier cloud database

### Setup

```bash
# Create a repository using the rt-stack template (replace YOUR_PROJECT)
pnpm dlx create-turbo@latest -m pnpm -e https://github.com/nktnet1/rt-stack YOUR_PROJECT

# Enter the directory or open in your IDE (replace YOUR_PROJECT)
cd YOUR_PROJECT

# Install all dependencies for apps and packages
pnpm install

# Copy .env.example to .env for all applications and the @repo/db package
pnpm env:copy-example

# Start a local postgres instance in the background (e.g. using docker)
docker compose up db --detach

# Push the drizzle schema to your database
pnpm db:push
```

You can then start all applications with

```bash
pnpm dev
```

By default the following URLs will be accessible:

- web application: http://localhost:8085
- backend server: http://localhost:3035

### Using an External Database

When using an external postgres database (e.g. from [supabase](https://supabase.com)), you can skip the step that spins up a local postgres instance with docker.

Instead, you will need to modify the following environment variables:

1. `SERVER_POSTGRES_URL` in the file `apps/server/.env`

   - used at runtime by the backend server in `pnpm dev`

1. `DB_POSTGRES_URL` in the file `packages/db/.env`
   - used in database schema migrations with `pnpm db:push`

## Developing

### Working with a single package

Use [`pnpm --filter=<name>`](https://pnpm.io/filtering) (where `<name>` is
defined in the `package.json` of each package).

Example usage:

```bash
# Install the nuqs package for our web application:
pnpm --filter=web install nuqs

# Format only the ui package:
pnpm --filter=@repo/ui format
```

You can get a list of all package names using the command below:

```bash
find . -maxdepth 3 -name "package.json" -exec grep '"name":' {} \;
```

### Adding new shadcn components

To install a single Shadcn/UI component, e.g. `button`, use the command

```bash
pnpm ui-add button
```

You can also open an interactive session to select components using a TUI by not passing any arguments

```bash
pnpm ui-add
```

- press `i` to enter interactive mode on startup
- use `j/k` (or arrow keys) to navigate up and down.
- use `<Space>` to toggle select your desired component(s)
- hit `<Enter>` to install all selected components

### Adding new better-auth plugins

When integrating more better-auth plugins, e.g.

- [admin](https://better-auth.vercel.app/docs/plugins/admin)
- [organization](https://better-auth.vercel.app/docs/plugins/organization)

You should

1. Modify the auth package server and client files in accordance with the plugin's
   respective documentations.

2. Run the interactive command:

   ```bash
   pnpm auth:schema:generate
   ```

   Press `i` to enter interactive mode, then `y` to overwrite [packages/db/src/schemas/auth.ts](packages/db/src/schemas/auth.ts).

3. Format and fix all linting issues, e.g. with

   ```bash
   pnpm format:fix
   pnpm lint:fix
   ```

4. Push your new schema to the database

   ```bash
   pnpm db:push
   ```

5. Occasionally, the type inference will not work immediately in your IDE (e.g. in VSCode).
   This can be resolved by running

   ```bash
   pnpm clean && pnpm install
   ```

   followed by a restarting your TS Server or reloading VSCode.

You can find an example in the [better-auth-admin-organization-plugins](https://github.com/nktnet1/rt-stack/tree/better-auth-admin-organization-plugins) branch.

### Tooling Scripts

All scripts are defined in [package.json](package.json) and
[turbo.json](turbo.json):

```bash
pnpm clean                  # remove all .cache, .turbo, dist, node_modules

pnpm typecheck              # report typescript issues

pnpm format                 # report prettier issues
pnpm format:fix             # auto-fix prettier issues

pnpm lint                   # report eslint issues
pnpm lint:fix               # auto-fix eslint issues

pnpx codemod pnpm/catalog   # migrate dependencies to pnpm-workspace.yaml
```

## Containerisation (Docker/Podman)

Both the `web` and `server` applications have been containerised. You can start
see this in action by running the commands:

```bash
# Start all applications
docker compose up --build

# Push the drizzle schema to your database. While you can use `pnpm db:push` on
# the host machine if you have installed all the required dependencies, it is
# also possible to do everything within docker alone.
# Open a second terminal and run the command:
docker compose run --build --rm drizzle

# Upon completion, you will be inside the `drizzle` docker container instead
# of the host machine. It is now possible to push the schema with:
pnpm db:push
```

You can then open the web link below in your browser:

- http://localhost:8085

Please note that these containers are run in production mode. For further
details, see

- [compose.yaml](compose.yaml)
- [apps/server/Dockerfile](apps/server/Dockerfile)
- [apps/web/Dockerfile](apps/web/Dockerfile)
- [apps/web/nginx.conf](apps/web/nginx.conf)

## Deployment

> [!TIP]
> The [live demo](https://rtstack.nktnet.uk) of RT Stack is currently deployed to
>
> - vercel for the web frontend
> - fly.io for the server backend and postgres database

### Using Containers

You can deploy applications to any services that supports docker deployment.

Using docker compose (see [compose.yaml](compose.yaml)) is also an option,
although this alone may not be production-ready at scale. However, it can be
paired with

- reverse proxies and load balancers offered by tools like
  [Traefik](https://github.com/traefik/traefik) or
  [Caddy](https://github.com/caddyserver/caddy)
- container orchestration platforms like [Docker Swarm](https://docs.docker.com/engine/swarm) and [Kubernetes](https://kubernetes.io)

Personally, I recommend setting up a Virtual Private Server (e.g. on [Hetzner](https://www.hetzner.com))
and make use of self-hostable PaaS software which automatically handles the complexity of deployment
mentioned above for you - these includes:

- Coolify
  - https://github.com/coollabsio/coolify
  - https://www.coolify.io
- Dokploy
  - https://github.com/Dokploy/dokploy
  - http://dokploy.com

Do note that for the **web** application, the `PUBLIC_SERVER_URL` variable
available at build time (as a docker build argument), rather than an environment
variable at runtime.

Also, both the **server** application's `PUBLIC_WEB_URL` and the **web**
application's `PUBLIC_SERVER_URL` needs to be set as internet-accessible URLs
when deployed, e.g. `https://mycompany.com` and `https://api.mycompany.com`,
rather than referencing `http://localhost:8085` like in development.

### Using Major Platforms

The **web** application is a simple React static site powered by Vite, which is
easily deployed to platforms such as GitHub/GitLab pages, Vercel and Netlify.
You can refer to the [vite documentation](https://vite.dev/guide/static-deploy)
for deployment guides on all major platforms.

The **server** application uses the [hono](https://hono.dev) web framework with
the [NodeJS runtime](https://hono.dev/docs/getting-started/nodejs). However,
this can be exchanged with other runtimes before deploying to your chosen
platforms. For example, deploying to Netlify is covered within
[Hono's documentations](https://hono.dev/docs/getting-started/netlify#_4-deploy).

Note that when deploying your web frontend and server backend to two different
domains, you will need to [tweak your better-auth configurations](https://www.better-auth.com/docs/integrations/hono#cross-domain-cookies).
Apple's Safari browser also does not support third party cookies, so auth will
not function as expected without any proxy workarounds.

To keep things simple, it is recommended that you host your frontend and
backend on the same root domain and differ by subdomains. For example, the
frontend can be served at either `example.com` or `web.example.com`, and the
backend hosted at `api.example.com`.

## Other Notes

### Tanstack Router

The following is configured in [vite.config.ts](apps/web/vite.config.ts) web
application:

```ts
TanStackRouterVite({
  routeToken: 'layout',
}),
```

This enables the use of a `layout.tsx` file in each directory similar to NextJS.
You can read more about this
[here](https://github.com/TanStack/router/discussions/1102#discussioncomment-10946603).

Also, it is recommended that you exclude the `routerTree.gen.ts` from your IDE.
For example, in VSCode, you can add the following `.vscode/settings.json` at the
root of your turborepo:

```json
{
  "files.readonlyInclude": {
    "**/routeTree.gen.ts": true
  },
  "files.watcherExclude": {
    "**/routeTree.gen.ts": true
  },
  "search.exclude": {
    "**/routeTree.gen.ts": true
  }
}
```

### Server API Artificial Delays

There is an artificial delay added in development mode to simulate API usage in
real-world environments. You can disable this by removing the `timingMiddleware`
in [./packages/api/src/server/trpc.ts](./packages/api/src/server/trpc.ts)

### Environment Variables

This template was made to follow the the recommendation of

- @tyleralbee in [this turborepo's GitHub discussion](https://github.com/vercel/turborepo/discussions/9458#discussioncomment-11443969)
- @cjkihl in [create-t3-turbo issue #397](https://github.com/t3-oss/create-t3-turbo/issues/397#issuecomment-1630028405)
- turborepo official docs on [environment variables best practices](https://turbo.build/repo/docs/crafting-your-repository/using-environment-variables#best-practices)

In using this template, it is recommended that

1. each application has a local `.env` file instead of a global `.env` at the
   root of your repository
1. packages should be pure, i.e. rely on factory methods and receiving inputs to
   instantiate rather than consuming environment variables directly
   - one exception is the `@repo/db` package, which requires the
     `DB_POSTGRES_URL` variable for schema migration with `pnpm db:push`
1. environment variables are prefixed, e.g. `SERVER_AUTH_SECRET` instead of
   `AUTH_SECRET`. Caching in the app's `turbo.json` can then be configured to
   use wildcards such as:
   ```json
   "tasks": {
      "build": {
        "env": ["SERVER_*"],
      }
    }
   ```

There is also a script that creates a `.env` from `.env.example` of each
app/package, which can be run with:

```bash
# NOTE: This will not overwrite existing local .env files
pnpm env:copy-example

# To reset any modifications to your .env and restore the examples, run:
pnpm env:remove
pnpm env:copy-example
```

It is recommended that any new apps that uses environment variables follow the
example script set in [apps/server/package.json](apps/server/package.json).

<h3>Extensions to Existing Template</h3>
<p>The table below demonstrates how you can build and extend upon the existing RT Stack template:</p>

<table>
  <thead>
    <tr>
      <th>Feature</th>
      <th>Description</th>
      <th>Branch Link</th>
    </tr>
  </thead>
  <tbody>
    <tr>
      <td>NextJS</td>
      <td>Adds a <code>docs</code> application that uses NextJS and Fumadocs, along with the workspace <code>@repo/ui</code> package.</td>
      <td><a href="https://github.com/nktnet1/rt-stack/tree/nextjs-fumadocs">nextjs-fumadocs</a></td>
    </tr>
    <tr>
      <td>Multi-language support</td>
      <td>Implements internationalisation support, e.g. switching between English and Vietnamese.</td>
      <td><a href="https://github.com/nktnet1/rt-stack/tree/i18n">i18n</a></td>
    </tr>
    <tr>
      <td>Better-auth Plugins</td>
      <td>Demonstrates how to integrate better-auth plugins in a type-safe and CLI-compatible manner.</td>
      <td><a href="https://github.com/nktnet1/rt-stack/tree/better-auth-admin-organization-plugins">better-auth-admin-organization-plugins</a></td>
    </tr>
  </tbody>
</table>
</file>

<file path="tools/eslint/base.js">
/// <reference types="./types.d.ts" />

import js from '@eslint/js';
import eslintConfigPrettier from 'eslint-config-prettier';
import turboConfig from 'eslint-config-turbo/flat';
import eslintPluginImport from 'eslint-plugin-import';
import turboPlugin from 'eslint-plugin-turbo';
import tseslint from 'typescript-eslint';
import onlyWarn from 'eslint-plugin-only-warn';

export const restrictEnvAccess = tseslint.config(
  { ignores: ['**/env.ts', 'dist/**'] },
  {
    files: ['**/*.js', '**/*.ts', '**/*.tsx'],
    rules: {
      'no-restricted-properties': [
        'error',
        {
          object: 'process',
          property: 'env',
          message:
            'Avoid using process.env directly - validate your types with valibot (example in ./apps/server/env.ts)',
        },
      ],
      'no-restricted-imports': [
        'error',
        {
          name: 'process',
          importNames: ['env'],
          message:
            'Avoid using process.env directly - validate your types with valibot (example in ./apps/server/env.ts)',
        },
      ],
    },
  },
);

export default tseslint.config([
  { ignores: ['dist/**'] },
  ...turboConfig,
  js.configs.recommended,
  eslintConfigPrettier,
  ...tseslint.configs.recommended,
  {
    plugins: {
      turbo: turboPlugin,
    },
    rules: {
      'turbo/no-undeclared-env-vars': 'warn',
    },
  },
  {
    plugins: {
      onlyWarn,
    },
  },
  {
    plugins: {
      import: eslintPluginImport,
    },
    rules: {
      'import/no-cycle': 'warn',
      'import/order': [
        'warn',
        {
          groups: [
            'builtin',
            'external',
            'type',
            'internal',
            'parent',
            'sibling',
            'index',
            'object',
          ],
          alphabetize: {
            order: 'asc',
          },
        },
      ],
    },
  },
  {
    rules: {
      semi: ['error', 'always'],
    },
  },
]);
</file>

<file path="tools/eslint/package.json">
{
  "name": "@repo/eslint-config",
  "version": "0.0.0",
  "type": "module",
  "private": true,
  "scripts": {
    "clean": "git clean -xdf .cache .turbo node_modules",
    "format": "prettier --check . --ignore-path ../../.gitignore",
    "typecheck": "tsc --noEmit"
  },
  "exports": {
    "./base": "./base.js",
    "./react": "./react.js"
  },
  "prettier": "@repo/prettier-config",
  "devDependencies": {
    "@eslint/js": "catalog:",
    "@repo/prettier-config": "workspace:*",
    "@repo/typescript-config": "workspace:*",
    "@types/eslint-config-prettier": "catalog:",
    "eslint": "catalog:",
    "eslint-config-prettier": "catalog:",
    "eslint-plugin-import": "catalog:",
    "eslint-plugin-only-warn": "catalog:",
    "eslint-plugin-react": "catalog:",
    "eslint-plugin-react-hooks": "catalog:",
    "eslint-plugin-turbo": "catalog:",
    "globals": "catalog:",
    "typescript": "catalog:",
    "typescript-eslint": "catalog:"
  },
  "dependencies": {
    "eslint-config-turbo": "catalog:"
  }
}
</file>

<file path="tools/eslint/react.js">
import js from '@eslint/js';
import eslintConfigPrettier from 'eslint-config-prettier';
import tseslint from 'typescript-eslint';
import pluginReactHooks from 'eslint-plugin-react-hooks';
import pluginReact from 'eslint-plugin-react';
import globals from 'globals';
import baseConfig from './base.js';

export default tseslint.config([
  ...baseConfig,
  js.configs.recommended,
  eslintConfigPrettier,
  ...tseslint.configs.recommended,
  pluginReact.configs.flat.recommended,
  {
    languageOptions: {
      ...pluginReact.configs.flat.recommended.languageOptions,
      globals: {
        ...globals.serviceworker,
        ...globals.browser,
      },
    },
  },
  {
    plugins: {
      'react-hooks': pluginReactHooks,
    },
    settings: { react: { version: 'detect' } },
    rules: {
      ...pluginReactHooks.configs.recommended.rules,
      // React scope no longer necessary with new JSX transform.
      'react/react-in-jsx-scope': 'off',
      'react/prop-types': 'off',
      'react/no-children-prop': 'off',
      '@typescript-eslint/no-explicit-any': 'off',
    },
  },
]);
</file>

<file path="tools/eslint/tsconfig.json">
{
  "extends": "@repo/typescript-config/base.json",
  "include": ["."],
  "exclude": ["node_modules"]
}
</file>

<file path="tools/eslint/types.d.ts">
declare module 'eslint-plugin-import' {
  import type { Linter, Rule } from 'eslint';

  export const configs: {
    recommended: { rules: Linter.RulesRecord };
  };
  export const rules: Record<string, Rule.RuleModule>;
}

declare module 'eslint-plugin-only-warn' {
  import type { Linter, Rule } from 'eslint';

  export const configs: {
    recommended: { rules: Linter.RulesRecord };
  };
  export const rules: Record<string, Rule.RuleModule>;
}

declare module 'eslint-plugin-react' {
  import type { Linter, Rule } from 'eslint';

  export const configs: {
    flat: {
      rules: Linter.RulesRecord;
      recommended: {
        rules: Linter.RulesRecord;
        languageOptions: Linter.LanguageOptions;
      };
    };
  };
  export const rules: Record<string, Rule.RuleModule>;
}

declare module 'eslint-config-turbo/flat' {
  import type { Linter } from 'eslint';

  export const configs: {
    recommended: {
      rules: Linter.RulesRecord;
    };
    flat: {
      rules: Linter.RulesRecord;
    };
  };
  const turboConfig: Array<{
    rules: Linter.RulesRecord;
  }>;
  export default turboConfig;
}

declare module 'eslint-plugin-react-hooks' {
  import type { Linter, Rule } from 'eslint';

  export const configs: {
    recommended: {
      rules: {
        'rules-of-hooks': Linter.RuleEntry;
        'exhaustive-deps': Linter.RuleEntry;
      };
    };
  };
  export const rules: Record<string, Rule.RuleModule>;
}
</file>

<file path="tools/prettier/index.js">
/** @typedef {import("prettier").Config} PrettierConfig */

/** @type { PrettierConfig } */
const config = {
  plugins: [],
  singleQuote: true,
};

export default config;
</file>

<file path="tools/prettier/package.json">
{
  "name": "@repo/prettier-config",
  "private": true,
  "version": "0.1.0",
  "type": "module",
  "exports": {
    ".": "./index.js"
  },
  "scripts": {
    "clean": "git clean -xdf .cache .turbo node_modules",
    "format": "prettier --check . --ignore-path ../../.gitignore",
    "typecheck": "tsc --noEmit"
  },
  "dependencies": {
    "prettier": "catalog:"
  },
  "devDependencies": {
    "@repo/typescript-config": "workspace:*",
    "typescript": "catalog:"
  },
  "prettier": "@repo/prettier-config"
}
</file>

<file path="tools/prettier/tsconfig.json">
{
  "extends": "@repo/typescript-config/base.json",
  "include": ["."],
  "exclude": ["node_modules"]
}
</file>

<file path="tools/tailwind/eslint.config.js">
import baseConfig from '@repo/eslint-config/base';

/** @type {import('typescript-eslint').Config} */
export default [...baseConfig];
</file>

<file path="tools/tailwind/package.json">
{
  "name": "@repo/tailwind-config",
  "type": "module",
  "scripts": {
    "clean": "git clean -xdf .cache .turbo node_modules",
    "format": "prettier --check . --ignore-path ../../.gitignore",
    "lint": "eslint"
  },
  "exports": {
    "./style.css": "./style.css"
  },
  "prettier": "@repo/prettier-config",
  "dependencies": {
    "eslint": "catalog:",
    "tailwindcss": "catalog:",
    "tailwindcss-animate": "catalog:"
  },
  "devDependencies": {
    "@repo/eslint-config": "workspace:*",
    "@repo/prettier-config": "workspace:*"
  }
}
</file>

<file path="tools/tailwind/style.css">
@import 'tailwindcss';

@plugin 'tailwindcss-animate';

@custom-variant dark (&:is(.dark *));

@theme {
  --color-selected: hsl(var(--selected));
  --color-nav: hsl(var(--nav));
  --color-elevated: hsl(var(--elevated));

  --color-background: hsl(var(--background));
  --color-foreground: hsl(var(--foreground));

  --color-card: hsl(var(--card));
  --color-card-foreground: hsl(var(--card-foreground));

  --color-popover: hsl(var(--popover));
  --color-popover-foreground: hsl(var(--popover-foreground));

  --color-primary: hsl(var(--primary));
  --color-primary-foreground: hsl(var(--primary-foreground));

  --color-secondary: hsl(var(--secondary));
  --color-secondary-foreground: hsl(var(--secondary-foreground));

  --color-muted: hsl(var(--muted));
  --color-muted-foreground: hsl(var(--muted-foreground));

  --color-accent: hsl(var(--accent));
  --color-accent-foreground: hsl(var(--accent-foreground));

  --color-destructive: hsl(var(--destructive));
  --color-destructive-foreground: hsl(var(--destructive-foreground));
  --color-success: hsl(var(--success));
  --color-success-foreground: hsl(var(--success-foreground));
  --color-info: hsl(var(--info));
  --color-info-foreground: hsl(var(--info-foreground));
  --color-warning: hsl(var(--warning));
  --color-warning-foreground: hsl(var(--warning-foreground));

  --color-border: hsl(var(--border));
  --color-input: hsl(var(--input));
  --color-ring: hsl(var(--ring));

  --color-chart-1: hsl(var(--chart-1));
  --color-chart-2: hsl(var(--chart-2));
  --color-chart-3: hsl(var(--chart-3));
  --color-chart-4: hsl(var(--chart-4));
  --color-chart-5: hsl(var(--chart-5));

  --color-sidebar: hsl(var(--sidebar-background));
  --color-sidebar-foreground: hsl(var(--sidebar-foreground));
  --color-sidebar-primary: hsl(var(--sidebar-primary));
  --color-sidebar-primary-foreground: hsl(var(--sidebar-primary-foreground));
  --color-sidebar-accent: hsl(var(--sidebar-accent));
  --color-sidebar-accent-foreground: hsl(var(--sidebar-accent-foreground));
  --color-sidebar-border: hsl(var(--sidebar-border));
  --color-sidebar-ring: hsl(var(--sidebar-ring));

  --radius-lg: var(--radius);
  --radius-md: calc(var(--radius) - 2px);
  --radius-sm: calc(var(--radius) - 4px);

  --animate-accordion-down: accordion-down 0.2s ease-out;
  --animate-accordion-up: accordion-up 0.2s ease-out;

  --color-toast-error: hsl(var(--toast-error));
  --color-toast-info: hsl(var(--toast-info));
  --color-toast-loading: hsl(var(--toast-loading));
  --color-toast-success: hsl(var(--toast-success));
  --color-toast-warning: hsl(var(--toast-warning));

  @keyframes accordion-down {
    from {
      height: 0;
    }
    to {
      height: var(--radix-accordion-content-height);
    }
  }
  @keyframes accordion-up {
    from {
      height: var(--radix-accordion-content-height);
    }
    to {
      height: 0;
    }
  }
}

/*
  The default border color has changed to `currentColor` in Tailwind CSS v4,
  so we've added these compatibility styles to make sure everything still
  looks the same as it did with Tailwind CSS v3.

  If we ever want to remove these styles, we need to add an explicit border
  color utility to any element that depends on these defaults.
*/
@layer base {
  *,
  ::after,
  ::before,
  ::backdrop,
  ::file-selector-button {
    border-color: var(--color-gray-200, currentColor);
  }
}

@layer base {
  :root {
    --selected: 350 50% 70%;
    --nav: 350 50% 80%;
    --elevated: 0 0% 90%;

    --background: 0 0% 100%;
    --foreground: 0 0% 3.9%;
    --card: 0 0% 100%;
    --card-foreground: 0 0% 3.9%;
    --popover: 0 0% 100%;
    --popover-foreground: 0 0% 3.9%;
    --primary: 350 50% 40%;
    --primary-foreground: 0 0% 98%;
    --secondary: 0 0% 96.1%;
    --secondary-foreground: 0 0% 9%;
    --muted: 0 0% 96.1%;
    --muted-foreground: 0 0% 45.1%;
    --accent: 0 0% 96.1%;
    --accent-foreground: 0 0% 9%;

    --destructive: 0 84.2% 60.2%;
    --destructive-foreground: 0 0% 98%;
    --success: 120 74.2% 48.9%;
    --success-foreground: 0 0 0%;
    --info: 200 88.8% 52%;
    --info-foreground: 200 20% 98%;
    --warning: 40 94.2% 61%;
    --warning-foreground: 40 60% 12%;

    --border: 0 0% 89.8%;
    --input: 0 0% 89.8%;
    --ring: 0 0% 3.9%;
    --chart-1: 12 76% 61%;
    --chart-2: 173 58% 39%;
    --chart-3: 197 37% 24%;
    --chart-4: 43 74% 66%;
    --chart-5: 27 87% 67%;
    --radius: 0.5rem;

    --toast-error: 0 100% 80%;
    --toast-info: 220 50% 85%;
    --toast-loading: 0 0% 90%;
    --toast-success: 140 50% 80%;
    --toast-warning: 40 100% 60%;

    --sidebar-background: 0 0% 98%;
    --sidebar-foreground: 240 5.3% 26.1%;
    --sidebar-primary: 240 5.9% 10%;
    --sidebar-primary-foreground: 0 0% 98%;
    --sidebar-accent: 240 4.8% 95.9%;
    --sidebar-accent-foreground: 240 5.9% 10%;
    --sidebar-border: 220 13% 91%;
    --sidebar-ring: 217.2 91.2% 59.8%;
  }

  .dark {
    --selected: 350 50% 30%;
    --nav: 350 50% 40%;
    --elevated: 0 0% 25%;

    --background: 50 20% 13%;
    --foreground: 0 0% 98%;
    --card: 0 0% 3.9%;
    --card-foreground: 0 0% 98%;
    --popover: 0 0% 3.9%;
    --popover-foreground: 0 0% 98%;
    --primary: 350 50% 80%;
    --primary-foreground: 0 0% 9%;
    --secondary: 0 0% 14.9%;
    --secondary-foreground: 0 0% 98%;
    --muted: 0 0% 14.9%;
    --muted-foreground: 0 0% 63.9%;
    --accent: 0 0% 14.9%;
    --accent-foreground: 0 0% 98%;

    --destructive: 0 62.8% 30.6%;
    --destructive-foreground: 0 0% 98%;
    --success: 120 45.8% 26.6%;
    --success-foreground: 120 20% 98%;
    --info: 200 60% 35.5%;
    --info-foreground: 200 20% 98%;
    --warning: 40 68.9% 42%;
    --warning-foreground: 40 60% 12%;

    --border: 0 0% 14.9%;
    --input: 0 0% 30%;
    --ring: 0 0% 83.1%;
    --chart-1: 220 70% 50%;
    --chart-2: 160 60% 45%;
    --chart-3: 30 80% 55%;
    --chart-4: 280 65% 60%;
    --chart-5: 340 75% 55%;

    --toast-error: 0 100% 30%;
    --toast-info: 220 50% 30%;
    --toast-loading: 0 0% 10%;
    --toast-success: 140 50% 20%;
    --toast-warning: 40 100% 30%;

    --sidebar-background: 240 5.9% 10%;
    --sidebar-foreground: 240 4.8% 95.9%;
    --sidebar-primary-foreground: 0 0% 100%;
    --sidebar-accent: 240 3.7% 15.9%;
    --sidebar-accent-foreground: 240 4.8% 95.9%;
    --sidebar-border: 240 3.7% 15.9%;
    --sidebar-ring: 217.2 91.2% 59.8%;
  }
}

@layer base {
  * {
    @apply border-border;
  }

  body {
    @apply bg-background text-foreground;
    background-color: var(--background);
    color: var(--foreground);
  }
}

/*
  ---break---
*/

@layer base {
  * {
    @apply border-border outline-ring/50;
  }
  body {
    @apply bg-background text-foreground;
  }
}
</file>

<file path="tools/typescript/base.json">
{
  "compilerOptions": {
    "esModuleInterop": true,
    "skipLibCheck": true,
    "target": "ES2022",
    "lib": ["ES2022"],
    "allowJs": true,
    "resolveJsonModule": true,
    "moduleDetection": "force",
    "verbatimModuleSyntax": true,
    "isolatedModules": true,

    /** Keep TSC performant in monorepos */
    "incremental": true,
    "disableSourceOfProjectReferenceRedirect": true,
    "tsBuildInfoFile": "${configDir}/.cache/tsbuildinfo.json",

    /** Strictness */
    "strict": true,
    "noUncheckedIndexedAccess": true,
    "checkJs": true,

    /** Transpile using Bundler (not tsc) */
    "module": "es2022",
    "moduleResolution": "bundler",
    "noEmit": true
  },
  "exclude": ["node_modules", "build", "dist"]
}
</file>

<file path="tools/typescript/internal-package.json">
{
  "$schema": "https://json.schemastore.org/tsconfig",
  "extends": "./base.json",
  "compilerOptions": {
    "composite": true,
    "declaration": true,
    "declarationMap": true,
    "sourceMap": true,
    "emitDeclarationOnly": true,
    "noEmit": false,
    "outDir": "${configDir}/dist"
  }
}
</file>

<file path="tools/typescript/package.json">
{
  "name": "@repo/typescript-config",
  "type": "module",
  "private": true,
  "files": [
    "*.json"
  ]
}
</file>

<file path="tools/typescript/vite.json">
{
  "extends": "./base.json",
  "compilerOptions": {
    "allowImportingTsExtensions": true,
    "declaration": true,
    "declarationMap": true,
    "inlineSources": false,
    "jsx": "react-jsx",
    "module": "ESNext",
    "moduleResolution": "bundler",
    "noFallthroughCasesInSwitch": true,
    "noUnusedLocals": true,
    "noUnusedParameters": true,
    "preserveWatchOutput": true
  },
  "exclude": ["node_modules"]
}
</file>

<file path="turbo.json">
{
  "$schema": "https://turbo.build/schema.json",
  "ui": "tui",
  "tasks": {
    "dev": {
      "dependsOn": ["^dev"],
      "persistent": false,
      "cache": false
    },
    "clean": {
      "cache": false
    },
    "build": {
      "dependsOn": ["^build"],
      "inputs": ["$TURBO_DEFAULT$", ".env*"],
      "outputs": ["dist/**"]
    },
    "auth:schema:generate": {
      "cache": false,
      "interactive": true
    },
    "format": {
      "outputs": [".cache/.prettiercache"],
      "outputLogs": "new-only"
    },
    "lint": {
      "dependsOn": ["^build"],
      "outputs": [".cache/.eslintcache"]
    },
    "typecheck": {
      "dependsOn": ["^build"],
      "outputs": [".cache/tsbuildinfo.json"]
    },
    "push": {
      "env": ["DB_POSTGRES_URL"],
      "cache": false,
      "interactive": true
    },
    "start": {
      "dependsOn": ["^build"]
    },
    "studio": {
      "cache": false,
      "persistent": true
    },
    "ui-add": {
      "cache": false,
      "interactive": true
    },
    "env:copy-example": {
      "cache": false
    },
    "env:remove": {
      "cache": false
    }
  },
  "globalEnv": [],
  "globalPassThroughEnv": ["NODE_ENV", "CI", "npm_lifecycle_event"]
}
</file>

</files>
